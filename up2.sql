-- Ericsson Software Inc. 2001-2012

-- DATABASE UPGRADE SCRIPT OF catalog FROM PRODUCT NO  TO PRODUCT NO 00006018
-- DATABASE UPGRADE SCRIPT OF cwl_config. PRODUCT NO 20131210
-- DATABASE UPGRADE SCRIPT OF serviceOrchestrationFramework FROM PRODUCT NO  TO PRODUCT NO 20120815
-- DATABASE UPGRADE SCRIPT OF cwt_common5. PRODUCT NO 20130315
-- DATABASE UPGRADE SCRIPT OF api_common. PRODUCT NO 20130410
-- DATABASE UPGRADE SCRIPT OF trainingMetadata FROM PRODUCT NO  TO PRODUCT NO 1
-- DATABASE UPGRADE SCRIPT OF cwl_ims. PRODUCT NO 20130319
-- DATABASE UPGRADE SCRIPT OF SIDCommon FROM PRODUCT NO  TO PRODUCT NO 00005201
-- DATABASE UPGRADE SCRIPT OF cwl_security FROM PRODUCT NO 20120816 TO PRODUCT NO 20120817
-- DATABASE UPGRADE SCRIPT OF catalogClient FROM PRODUCT NO  TO PRODUCT NO 00006003


-- ATTENTION: THIS SCRIPT HAS TO BE EXAMINED BY DATABASE ADMINISTRATOR!
--            IT MAY NOT CONTAIN ALL NEEDED PARAMETERS.
--            MODIFY THE SCRIPT TO SPECIFY PROPER TABLESPACE AND STORAGE CLAUSES


-- WARNING : PLEASE REVIEW THE FOLLOWING NCLOB (UNLIMITED LENGTH) TYPES:
-- DATA
-- ITEMRULESCRIPT
-- DATA
-- RULESCRIPT
-- MESSAGE
-- NOTES_BLOB
-- NOTES_BLOB



-- Generated by Ericsson Service Designer on Tue Jul 04 18:52:57 IST 2017


-- THE FOLLOWING STATEMENTS APPLY TO 'upadmin:orcl@localhost' DATABASE ------------------------------- 


define DEFAULT_TABLESPACE_TABLE = USERS;
define DEFAULT_TABLESPACE_INDEX = USERS;
define PE_TABLESPACE_TABLE = USERS;
define PE_TABLESPACE_INDEX = USERS;

CREATE TABLE upadmin.CWPC_RULESPACEROW_V(
	VERSIONID VARCHAR2(32) NOT NULL,
	CODE VARCHAR2(32),
	INFOTABLECODE VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CONSTRAINT PK_CWPC_RULESPACEROW_V PRIMARY KEY(VERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_RULESPACEROW_V ON CWPC_RULESPACEROW_V(VERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_RULEASSIGNMENT_V(
	VERSIONID VARCHAR2(32) NOT NULL,
	CODE VARCHAR2(32),
	INFOTABLECODE VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	ITEMCODE VARCHAR2(32),
	CATALOGOBJECTCODE VARCHAR2(32),
	CATALOGOBJECTTYPE VARCHAR2(16),
	TYPE VARCHAR2(32),
	REFID VARCHAR2(512),
	VALUE VARCHAR2(4000),
	STATUS VARCHAR2(3),
	VERSIONCOMMITDATE DATE,
	CANCEL NUMBER(1),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	INFOTABLEID VARCHAR2(32),
	CONSTRAINT PK_CWPC_RULEASSIGNMENT_V PRIMARY KEY(VERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_RULEASSIGNMENT_V ON CWPC_RULEASSIGNMENT_V(VERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_INFOTABLEROW_V(
	VERSIONID VARCHAR2(32) NOT NULL,
	CODE VARCHAR2(32),
	INFOTABLECODE VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	STATUS VARCHAR2(3),
	VERSIONCOMMITDATE DATE,
	CANCEL NUMBER(1),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	INFOTABLEID VARCHAR2(32),
	CONSTRAINT PK_CWPC_INFOTABLEROW_V PRIMARY KEY(VERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_INFOTABLEROW_V ON CWPC_INFOTABLEROW_V(VERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_BUSINESSDATEMODELDATES(
	ID VARCHAR2(32) NOT NULL,
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	SEQUENCE NUMBER(4),
	DATESMODELCODE VARCHAR2(32),
	DATESMODELDATECODE VARCHAR2(32),
	DATEMODELDEFINITIONCODE VARCHAR2(32),
	OWNERID VARCHAR2(32),
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_CWPC_BUSINESSDATEMODELDATES PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_BUSINESSDATEMODELDATES ON CWPC_BUSINESSDATEMODELDATES(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_BUSINESSDATEMODEL(
	UPDATEDBY VARCHAR2(64),
	ENDDATE DATE,
	STARTDATE DATE,
	STATUS VARCHAR2(3),
	MODELCODE VARCHAR2(32) NOT NULL,
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	OWNERID VARCHAR2(32),
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_CWPC_BUSINESSDATEMODEL PRIMARY KEY(MODELCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_BUSINESSDATEMODEL ON CWPC_BUSINESSDATEMODEL(MODELCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_BUSINESSDATEDEFINITION(
	CODE VARCHAR2(32) NOT NULL,
	NAME VARCHAR2(128),
	DATETYPE VARCHAR2(32),
	DATEVALUELEAFNAME VARCHAR2(32),
	RELATEDDATECODE VARCHAR2(32),
	STATUS VARCHAR2(3),
	STARTDATE DATE,
	ENDDATE DATE,
	PERIODCODE VARCHAR2(30),
	PERIODNAME VARCHAR2(10),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CREATEDBY VARCHAR2(64),
	CREATEDDATE DATE,
	OWNERID VARCHAR2(32),
	LABEL VARCHAR2(10),
	CONSTRAINT PK_CWPC_BUSINESSDATEDEFINITION PRIMARY KEY(CODE) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_BUSINESSDATEDEFINITION ON CWPC_BUSINESSDATEDEFINITION(CODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_basketItemRelation(
	BASKETITEMIDFROM VARCHAR2(16),
	BASKETITEMIDTO VARCHAR2(16),
	RELATIONNAME VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	BASKETID VARCHAR2(16),
	BASKETITEMRELATIONID VARCHAR2(10) NOT NULL,
	CONSTRAINT PK_cwpc_basketItemRelation PRIMARY KEY(BASKETITEMRELATIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_basketItemRelation ON cwpc_basketItemRelation(BASKETITEMRELATIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_basketItemCharge(
	BASKETID VARCHAR2(16),
	BASKETITEMID VARCHAR2(16),
	CHARGETYPECODE VARCHAR2(32),
	AMOUNT NUMBER(13,4),
	SEQUENCENO NUMBER(4),
	CURRENCY VARCHAR2(3),
	FREQUENCY VARCHAR2(1),
	TAXCODE VARCHAR2(32),
	LABEL VARCHAR2(128),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	TYPE VARCHAR2(4),
	BASKETITEMCHARGEID VARCHAR2(10) NOT NULL,
	ITEMCHARGECODE VARCHAR2(32),
	CONSTRAINT PK_cwpc_basketItemCharge PRIMARY KEY(BASKETITEMCHARGEID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_basketItemCharge ON cwpc_basketItemCharge(BASKETITEMCHARGEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_basketItem(
	BASKETITEMID VARCHAR2(16) NOT NULL,
	BASKETID VARCHAR2(16),
	ITEMCODE VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	PARENTBASKETITEMID VARCHAR2(16),
	RELATIONNAME VARCHAR2(32),
	SEQUENCENO NUMBER(8),
	REQUESTTIME DATE,
	SEARCHTEXT VARCHAR2(4000),
	DATA NCLOB,
	STATE VARCHAR2(16),
	ACTION VARCHAR2(32),
	CUSTOMERID VARCHAR2(32),
	ACCOUNTID VARCHAR2(32),
	LOCATIONID VARCHAR2(32),
	SITEID VARCHAR2(32),
	SERVICEDATE DATE,
	FAMILY VARCHAR2(32),
	CATEGORY VARCHAR2(32),
	RELATIONS VARCHAR2(4000),
	CONSTRAINT PK_cwpc_basketItem PRIMARY KEY(BASKETITEMID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_basketItem ON cwpc_basketItem(BASKETITEMID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_basket(
	BASKETID VARCHAR2(16) NOT NULL,
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWORDERID VARCHAR2(16),
	STATE VARCHAR2(16),
	CWBASKETSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_basket PRIMARY KEY(BASKETID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_basket ON cwpc_basket(BASKETID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_PERMISSION_PREREQUISITE(
	CWDOCID VARCHAR2(16) NOT NULL,
	OBJECTTYPE VARCHAR2(16),
	ACTION VARCHAR2(4),
	REQUIREOBJECTTYPE VARCHAR2(16),
	REQUIREACTION VARCHAR2(4),
	FORSID NUMBER(1),
	CONSTRAINT PK_CWPC_PERMISSION_PREREQUISIT PRIMARY KEY(CWDOCID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_PERMISSION_PREREQUISIT ON CWPC_PERMISSION_PREREQUISITE(CWDOCID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_deletedObjectRecord(
	STARTDATE DATE,
	ID VARCHAR2(10) NOT NULL,
	PARENTOBJECTCODE VARCHAR2(32),
	PARENTOBJECTTYPE VARCHAR2(32),
	ASSOCIATETYPE VARCHAR2(10),
	ASSOCIATEOBJECTID VARCHAR2(32),
	CATALOGID VARCHAR2(32),
	CATALOGCODE VARCHAR2(32),
	CATALOGNAME VARCHAR2(64),
	CATALOGTYPE VARCHAR2(64),
	UPDATEDBY VARCHAR2(64),
	CONSTRAINT PK_cwpc_deletedObjectRecord PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_deletedObjectRecord ON cwpc_deletedObjectRecord(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_TAX_V(
	TAXVERSIONID VARCHAR2(32) NOT NULL,
	TAXCODE VARCHAR2(32),
	NAME VARCHAR2(128),
	STATUS VARCHAR2(3),
	STARTDATE DATE,
	ENDDATE DATE,
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	PERCENTAGE NUMBER(5,2),
	OWNERID VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	INCLUDEDINPRICE NUMBER(1),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_CWPC_TAX_V PRIMARY KEY(TAXVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_TAX_V ON CWPC_TAX_V(TAXVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_taxModel_v(
	TAXMODELVERSIONID VARCHAR2(32) NOT NULL,
	TAXMODELCODE VARCHAR2(32),
	STATUS VARCHAR2(3),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_cwpc_taxModel_v PRIMARY KEY(TAXMODELVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_taxModel_v ON cwpc_taxModel_v(TAXMODELVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_taxModelItem(
	TAXMODELITEMID VARCHAR2(32) NOT NULL,
	TAXMODELVERSIONID VARCHAR2(32),
	TAXCODE VARCHAR2(32),
	TAXMODELCODE VARCHAR2(32),
	SEQUENCE NUMBER(4),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_taxModelItem PRIMARY KEY(TAXMODELITEMID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_taxModelItem ON cwpc_taxModelItem(TAXMODELITEMID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_taxModel(
	TAXMODELCODE VARCHAR2(32) NOT NULL,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_taxModel PRIMARY KEY(TAXMODELCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_taxModel ON cwpc_taxModel(TAXMODELCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_tax(
	TAXCODE VARCHAR2(32) NOT NULL,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_tax PRIMARY KEY(TAXCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_tax ON cwpc_tax(TAXCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_systemIdentifier(
	SYSTEMIDENTIFIERID VARCHAR2(32) NOT NULL,
	SYSTEMID VARCHAR2(32),
	ITEMCODE VARCHAR2(32),
	NAME VARCHAR2(128),
	VALUE VARCHAR2(512),
	OWNERID VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	LABEL VARCHAR2(10),
	CHARGETYPECODE VARCHAR2(32),
	CANCEL NUMBER(1),
	CONSTRAINT PK_cwpc_systemIdentifier PRIMARY KEY(SYSTEMIDENTIFIERID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_systemIdentifier ON cwpc_systemIdentifier(SYSTEMIDENTIFIERID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_ruleParameters(
	PARAMNAME VARCHAR2(32) NOT NULL,
	ATTRIBUTECODE VARCHAR2(32),
	RULENAME VARCHAR2(32),
	OWNERID VARCHAR2(32),
	RULEPARAMETERID VARCHAR2(32) NOT NULL,
	SEQUENCE NUMBER(4),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	DEFAULTVALUE VARCHAR2(4000),
	CONSTRAINT PK_cwpc_ruleParameters PRIMARY KEY(RULEPARAMETERID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_ruleParameters ON cwpc_ruleParameters(RULEPARAMETERID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_RESTRICTION_V(
	RESTRICTIONID VARCHAR2(32) NOT NULL,
	RESTRICTIONNAME VARCHAR2(32),
	CATALOGOBJECTCODE VARCHAR2(32),
	IMMUTABLE NUMBER(1),
	ISNULL NUMBER(1),
	SELECTED NUMBER(1),
	SEQUENCE NUMBER(4),
	DEFAULTVALUE VARCHAR2(2048),
	STARTDATE DATE,
	ENDDATE DATE,
	ASSOCIATIONTYPECODE VARCHAR2(32),
	OWNERID VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CATALOGOBJECTTYPE VARCHAR2(16),
	STATUS VARCHAR2(3),
	CTTYPE VARCHAR2(1),
	CODETABLERESTRICTION VARCHAR2(4000),
	ITEMCODE VARCHAR2(32),
	CANCEL NUMBER(1),
	ISDEFAULTVALUEFORMULA NUMBER(1),
	VERSIONCOMMITDATE DATE,
	VALUERANGESET VARCHAR2(512),
	VALUERANGERESTRICTIONTYPE VARCHAR2(1),
	REGULAREXPRESSION VARCHAR2(1024),
	RELATEDCATALOGOBJECTATTRCODE VARCHAR2(32),
	RELATEDCATALOGOBJECTCODE VARCHAR2(32),
	RELATEDCATALOGOBJECTPATH VARCHAR2(512),
	RELATEDCATALOGOBJECTTYPE VARCHAR2(20),
	ATTRIBUTERELATIONTYPE VARCHAR2(32),
	CONSTRAINT PK_CWPC_RESTRICTION_V PRIMARY KEY(RESTRICTIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_RESTRICTION_V ON CWPC_RESTRICTION_V(RESTRICTIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_associationTypeAttr(
	ASSOCIATIONTYPEATTRIBUTEID VARCHAR2(32) NOT NULL,
	ASSOCIATIONTYPECODE VARCHAR2(32),
	ATTRIBUTECODE VARCHAR2(32),
	ASSOCIATIONATTRNAME VARCHAR2(32),
	SEQUENCE NUMBER(4),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_associationTypeAttr PRIMARY KEY(ASSOCIATIONTYPEATTRIBUTEID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_associationTypeAttr ON cwpc_associationTypeAttr(ASSOCIATIONTYPEATTRIBUTEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_associationType(
	ASSOCIATIONTYPECODE VARCHAR2(32) NOT NULL,
	CATEGORY VARCHAR2(16),
	STATUS VARCHAR2(3),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	RULETYPE VARCHAR2(1),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_associationType PRIMARY KEY(ASSOCIATIONTYPECODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_associationType ON cwpc_associationType(ASSOCIATIONTYPECODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMCHARGE_V(
	ITEMCHARGEVERSIONID VARCHAR2(32) NOT NULL,
	ITEMCODE VARCHAR2(32),
	CHARGETYPECODE VARCHAR2(32),
	ITEMCHARGECODE VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	ITEMRELATIONCODE VARCHAR2(32),
	ITEMGROUPCODE VARCHAR2(32),
	SEQUENCE NUMBER(4),
	OWNERID VARCHAR2(32),
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	CATALOGOBJECTTYPE VARCHAR2(16),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	CANCEL NUMBER(1),
	VERSIONCOMMITDATE DATE,
	PERCENTAGE NUMBER(5,2),
	RULENAME VARCHAR2(32),
	INFOMODELCODE VARCHAR2(32),
	MARKUP NUMBER(5,2),
	VALUE NUMBER(10,2),
	TARGETITEMCHARGECODE VARCHAR2(32),
	CONSTRAINT PK_CWPC_ITEMCHARGE_V PRIMARY KEY(ITEMCHARGEVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMCHARGE_V ON CWPC_ITEMCHARGE_V(ITEMCHARGEVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_itemAttribute_v(
	ITEMATTRVERSIONID VARCHAR2(32) NOT NULL,
	ATTRIBUTECODE VARCHAR2(32),
	ITEMCODE VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	ITEMATTRIBUTECODE VARCHAR2(32),
	ITEMRELATIONCODE VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	SEQUENCE NUMBER(4),
	ISPROPERTY NUMBER(1),
	DEFAULTVALUE VARCHAR2(2048),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CATALOGOBJECTTYPE VARCHAR2(16),
	STATUS VARCHAR2(3),
	ASSOCIATIONTYPE VARCHAR2(32),
	CANCEL NUMBER(1),
	VERSIONCOMMITDATE DATE,
	ISDEFAULTVALUEFORMULA NUMBER(1),
	CLASSIFICATIONTYPES VARCHAR2(512),
	VALUERANGESET VARCHAR2(512),
	REGULAREXPRESSION VARCHAR2(1024),
	CODETABLERESTRICTION VARCHAR2(1024),
	CODETABLERESTRICTIONTYPE VARCHAR2(1),
	REFITEMCODE VARCHAR2(32),
	ISARRAY NUMBER(1),
	ARRAYSIZE NUMBER(4),
	CONSTRAINT PK_cwpc_itemAttribute_v PRIMARY KEY(ITEMATTRVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_itemAttribute_v ON cwpc_itemAttribute_v(ITEMATTRVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_project(
	PROJECTID VARCHAR2(10) NOT NULL,
	PROJECTCODE VARCHAR2(32) NOT NULL,
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	STATUS VARCHAR2(3),
	OWNERID VARCHAR2(32),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	EFFECTIVEDATE DATE,
	PARENTPROJECTID VARCHAR2(10),
	PROJECTTYPE VARCHAR2(32),
	CONSTRAINT PK_cwpc_project PRIMARY KEY(PROJECTCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_project ON cwpc_project(PROJECTCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_projectCommand(
	PROJECTASSIGNMENTID VARCHAR2(32) NOT NULL,
	PROJECTID VARCHAR2(10),
	CATALOGOBJECTID VARCHAR2(32),
	OBJECTTYPE VARCHAR2(64),
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CATALOGOBJECTCODE VARCHAR2(32),
	CONSTRAINT PK_cwpc_projectCommand PRIMARY KEY(PROJECTASSIGNMENTID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_projectCommand ON cwpc_projectCommand(PROJECTASSIGNMENTID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMRULE_V(
	ITEMRULEVERSIONID VARCHAR2(32) NOT NULL,
	ITEMCODE VARCHAR2(32),
	ITEMRULECODE VARCHAR2(32),
	RULENAME VARCHAR2(32),
	MESSAGECODE VARCHAR2(16),
	CATALOGOBJECTTYPE VARCHAR2(16),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	STARTDATE DATE,
	ENDDATE DATE,
	STATUS VARCHAR2(3),
	RULE_TYPE_BUSINESS VARCHAR2(32),
	ITEMRULESCRIPT NCLOB,
	OWNERID VARCHAR2(32),
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LANGUAGE VARCHAR2(3),
	VERSIONCOMMITDATE DATE,
	CATALOGOBJECTCODE VARCHAR2(32),
	SEQUENCE NUMBER(4),
	CANCEL NUMBER(1),
	CONSTRAINT PK_CWPC_ITEMRULE_V PRIMARY KEY(ITEMRULEVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMRULE_V ON CWPC_ITEMRULE_V(ITEMRULEVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_MARKETSEGMENT(
	MARKETSEGMENTID VARCHAR2(32) NOT NULL,
	OPERATOR VARCHAR2(10),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	DIMENSION1 VARCHAR2(32),
	DIMENSION2 VARCHAR2(32),
	DIMENSION3 VARCHAR2(32),
	DIMENSION4 VARCHAR2(32),
	DIMENSION5 VARCHAR2(32),
	DIMENSION6 VARCHAR2(32),
	DIMENSION7 VARCHAR2(32),
	CONSTRAINT PK_CWPC_MARKETSEGMENT PRIMARY KEY(MARKETSEGMENTID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_MARKETSEGMENT ON CWPC_MARKETSEGMENT(MARKETSEGMENTID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_MARKETSEGMENTDIMENSION(
	DIMENSIONCODE VARCHAR2(32) NOT NULL,
	MSDIMENSIONVALUELEAFNAME VARCHAR2(32),
	DIMENSIONTYPE VARCHAR2(32),
	TREECODE VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	SEQUENCE NUMBER(4),
	STATUS VARCHAR2(3),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR2(64),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_CWPC_MARKETSEGMENTDIMENSION PRIMARY KEY(DIMENSIONCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_MARKETSEGMENTDIMENSION ON CWPC_MARKETSEGMENTDIMENSION(DIMENSIONCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_itemTypePermission(
	ITEMCODE VARCHAR2(32) NOT NULL,
	ATTRIBUTEADD NUMBER(1),
	ATTRIBUTEDELETE NUMBER(1),
	IMAGEADD NUMBER(1),
	RELATIONADD NUMBER(1),
	RELATIONDELETE NUMBER(1),
	IMAGEDELETE NUMBER(1),
	CHARGETYPEADD NUMBER(1),
	CHARGETYPEDELETE NUMBER(1),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_itemTypePermission PRIMARY KEY(ITEMCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_itemTypePermission ON cwpc_itemTypePermission(ITEMCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMRELATION_V(
	ITEMRELATIONVERSIONID VARCHAR2(32) NOT NULL,
	ITEMRELATIONCODE VARCHAR2(32),
	ITEMRELATIONTARGET VARCHAR2(32),
	ASSOCIATIONTYPE VARCHAR2(32),
	ITEMCODE VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	SEQUENCE NUMBER(4),
	MIN_QUANTITY NUMBER(4),
	MAX_QUANTITY NUMBER(4),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	CANCEL NUMBER(1),
	DEFAULTQUANTITY NUMBER(4),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_CWPC_ITEMRELATION_V PRIMARY KEY(ITEMRELATIONVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMRELATION_V ON CWPC_ITEMRELATION_V(ITEMRELATIONVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_item(
	ITEMCODE VARCHAR2(32) NOT NULL,
	TYPE NUMBER(1),
	BASEITEMCODE VARCHAR2(32),
	ITEMTYPE VARCHAR2(32),
	NAME VARCHAR2(128),
	STATUS VARCHAR2(3),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	ORDERABLE NUMBER(1),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STARTDATE DATE,
	ENDDATE DATE,
	CLASSIFICATIONTYPES VARCHAR2(512),
	ENFORCEACTIONS NUMBER(1),
	CONSTRAINT PK_cwpc_item PRIMARY KEY(ITEMCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_item ON cwpc_item(ITEMCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMMARKETSEGMENTRULE(
	ITEMMARKETSEGMENTRULEID VARCHAR2(32) NOT NULL,
	ITEMMARKLETSEGMENTRULECODE VARCHAR2(32),
	ITEMCODE VARCHAR2(32),
	CATALOGOBJECTCODE VARCHAR2(32),
	CATALOGOBJECTTYPE VARCHAR2(16),
	MARKETSEGMENTID VARCHAR2(32),
	STATUS VARCHAR2(3),
	TYPE VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_CWPC_ITEMMARKETSEGMENTRULE PRIMARY KEY(ITEMMARKETSEGMENTRULEID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMMARKETSEGMENTRULE ON CWPC_ITEMMARKETSEGMENTRULE(ITEMMARKETSEGMENTRULEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMIMAGE_V(
	ITEMIMAGEVERSIONID VARCHAR2(32) NOT NULL,
	ITEMCODE VARCHAR2(32),
	ITEMIMAGECODE VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	STARTDATE DATE,
	ENDDATE DATE,
	CATEGORY VARCHAR2(32),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	CANCEL NUMBER(1),
	IMAGETYPE VARCHAR2(4),
	IMAGESIZE VARCHAR2(1),
	CLASSIFICATIONTYPES VARCHAR2(512),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_CWPC_ITEMIMAGE_V PRIMARY KEY(ITEMIMAGEVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMIMAGE_V ON CWPC_ITEMIMAGE_V(ITEMIMAGEVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMGROUP_V(
	ITEMGROUPID VARCHAR2(32) NOT NULL,
	ITEMCODE VARCHAR2(32),
	ITEMGROUPCODE VARCHAR2(32),
	GROUPTYPE VARCHAR2(32),
	STATUS VARCHAR2(3),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	MIN_CARDINALITY NUMBER(4),
	MAX_CARDINALITY NUMBER(4),
	STARTDATE DATE,
	ENDDATE DATE,
	CANCEL NUMBER(1),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_CWPC_ITEMGROUP_V PRIMARY KEY(ITEMGROUPID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMGROUP_V ON CWPC_ITEMGROUP_V(ITEMGROUPID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMLABEL_V(
	ITEMLABELID VARCHAR2(32) NOT NULL,
	ITEMLABELCODE VARCHAR2(32),
	ITEMCODE VARCHAR2(32),
	LABEL VARCHAR2(10),
	CATEGORY VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	CANCEL NUMBER(1),
	CLASSIFICATIONTYPES VARCHAR2(512),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_CWPC_ITEMLABEL_V PRIMARY KEY(ITEMLABELID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMLABEL_V ON CWPC_ITEMLABEL_V(ITEMLABELID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ICTATTRIBUTE_V(
	ICTATTRVERSIONID VARCHAR2(32) NOT NULL,
	ATTRIBUTECODE VARCHAR2(32),
	ICTCODE VARCHAR2(32),
	CTCODE VARCHAR2(32),
	ITEMCODE VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	ICTATTRIBUTECODE VARCHAR2(32),
	ICTRELATIONCODE VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	SEQUENCE NUMBER(4),
	ISPROPERTY NUMBER(1),
	DEFAULTVALUE VARCHAR2(2048),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	CATALOGOBJECTTYPE VARCHAR2(20),
	CANCEL NUMBER(1),
	ASSOCIATIONTYPE VARCHAR2(32),
	ISDEFAULTVALUEFORMULA NUMBER(1),
	VERSIONCOMMITDATE DATE,
	VALUERANGESET VARCHAR2(512),
	REGULAREXPRESSION VARCHAR2(1024),
	CODETABLERESTRICTION VARCHAR2(1024),
	CODETABLERESTRICTIONTYPE VARCHAR2(1),
	CLASSIFICATIONTYPES VARCHAR2(512),
	CONSTRAINT PK_CWPC_ICTATTRIBUTE_V PRIMARY KEY(ICTATTRVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ICTATTRIBUTE_V ON CWPC_ICTATTRIBUTE_V(ICTATTRVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMBUSINESSDATES_V(
	ITEMBUSINESSDATEVERSIONID VARCHAR2(32) NOT NULL,
	ITEMBUSINESSDATESCODE VARCHAR2(32),
	ITEMCODE VARCHAR2(32),
	CATALOGOBJECTTYPE VARCHAR2(16),
	CATALOGOBJECTCODE VARCHAR2(32),
	DATESMODELCODE VARCHAR2(32),
	BUSINESSDATESVALUEID VARCHAR2(32),
	BUSINESSDATESVALUE VARCHAR2(4000),
	STATUS VARCHAR2(3),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	VERSIONCOMMITDATE DATE,
	ISFORMULA NUMBER(1),
	CONSTRAINT PK_CWPC_ITEMBUSINESSDATES_V PRIMARY KEY(ITEMBUSINESSDATEVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMBUSINESSDATES_V ON CWPC_ITEMBUSINESSDATES_V(ITEMBUSINESSDATEVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_itemAttachment_v(
	ITEMATTACHMENTID VARCHAR2(32) NOT NULL,
	ITEMCODE VARCHAR2(32),
	ITEMATTACHMENTCODE VARCHAR2(32),
	CATEGORY VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	CWCREATED DATE,
	STATUS VARCHAR2(3),
	CANCEL NUMBER(1),
	MIMETYPE VARCHAR2(256),
	ATTACHMENTNAME VARCHAR2(128),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_cwpc_itemAttachment_v PRIMARY KEY(ITEMATTACHMENTID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_itemAttachment_v ON cwpc_itemAttachment_v(ITEMATTACHMENTID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_ITEMACTION_V(
	ITEMACTIONID VARCHAR2(32) NOT NULL,
	ITEMCODE VARCHAR2(32),
	ITEMACTIONCODE VARCHAR2(32),
	STATUS VARCHAR2(3),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	STARTDATE DATE,
	ENDDATE DATE,
	ACTIONTYPE VARCHAR2(32),
	CANCEL NUMBER(1),
	ORDERITEMACTION VARCHAR2(32),
	SUBACTION VARCHAR2(32),
	IMPLEMENTATIONTYPE VARCHAR2(32),
	IMPLEMENTATIONVALUE VARCHAR2(255),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONDITION VARCHAR2(32),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_CWPC_ITEMACTION_V PRIMARY KEY(ITEMACTIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_ITEMACTION_V ON CWPC_ITEMACTION_V(ITEMACTIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_infoTable(
	INFOTABLEID VARCHAR2(32) NOT NULL,
	INFOTABLECODE VARCHAR2(32),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(10),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	STATUS VARCHAR2(3),
	INFOMODELCODE VARCHAR2(32),
	KEY1 VARCHAR2(32),
	KEY2 VARCHAR2(32),
	KEY3 VARCHAR2(32),
	VERSIONCOMMITDATE DATE,
	PROPERTIES VARCHAR2(4000),
	DATA NCLOB,
	CONSTRAINT PK_cwpc_infoTable PRIMARY KEY(INFOTABLEID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_infoTable ON cwpc_infoTable(INFOTABLEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_infoModelAttribute(
	INFOMODELATTRIBUTEID VARCHAR2(32) NOT NULL,
	ATTRIBUTECODE VARCHAR2(32),
	MODELATTRNAME VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	SEQUENCE NUMBER(4),
	ISNULL NUMBER(1),
	ISSEARCH NUMBER(1),
	DESCENDING NUMBER(1),
	OWNERID VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	INFOMODELCODE VARCHAR2(32),
	TYPE VARCHAR2(32),
	ASSOCIATIONTYPE VARCHAR2(32),
	CONSTRAINT PK_cwpc_infoModelAttribute PRIMARY KEY(INFOMODELATTRIBUTEID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_infoModelAttribute ON cwpc_infoModelAttribute(INFOMODELATTRIBUTEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_infoModel(
	INFOMODELCODE VARCHAR2(32) NOT NULL,
	NAME VARCHAR2(128),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	STARTDATE DATE,
	ENDDATE DATE,
	ISDYNAMIC NUMBER(1),
	DBTABLENAME VARCHAR2(32),
	ISBLOBDBTABLE NUMBER(1),
	EXPIRATIONINTERVAL NUMBER(4),
	TYPE NUMBER(4),
	SUBTYPE VARCHAR2(32),
	ISROWVERSIONING NUMBER(1),
	CONSTRAINT PK_cwpc_infoModel PRIMARY KEY(INFOMODELCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_infoModel ON cwpc_infoModel(INFOMODELCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_groupTarget(
	GROUPTARGETID VARCHAR2(32) NOT NULL,
	ITEMGROUPID VARCHAR2(32),
	ASSOCIATIONTYPE VARCHAR2(32),
	ITEMRELATIONCODE VARCHAR2(32),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_groupTarget PRIMARY KEY(GROUPTARGETID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_groupTarget ON cwpc_groupTarget(GROUPTARGETID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_contextAttribute(
	CONTEXTATTRIBUTEID VARCHAR2(32) NOT NULL,
	CONTEXTCODE VARCHAR2(32),
	ATTRIBUTECODE VARCHAR2(32),
	CONTEXTVARIABLENAME VARCHAR2(64),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_contextAttribute PRIMARY KEY(CONTEXTATTRIBUTEID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_contextAttribute ON cwpc_contextAttribute(CONTEXTATTRIBUTEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_context(
	CONTEXTCODE VARCHAR2(32) NOT NULL,
	NAME VARCHAR2(128),
	STATUS VARCHAR2(3),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_context PRIMARY KEY(CONTEXTCODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_context ON cwpc_context(CONTEXTCODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_CHARGETYPE_V(
	CHARGETYPEVERSIONID VARCHAR2(32) NOT NULL,
	CHARGETYPECODE VARCHAR2(32),
	NAME VARCHAR2(128),
	DISPLAYONLY NUMBER(1),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	STATUS VARCHAR2(3),
	STARTDATE DATE,
	ENDDATE DATE,
	CHARGEFREQ VARCHAR2(32),
	STEPPRICINGTYPE VARCHAR2(16),
	VALUE NUMBER(10,2),
	CURRENCY VARCHAR2(3),
	OWNERID VARCHAR2(32),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	TAXMODELCODE VARCHAR2(32),
	INFOMODELCODE VARCHAR2(32),
	DISCOUNTTARGETCHARGE VARCHAR2(32),
	DISCOUNTTYPE VARCHAR2(1),
	PERCENTAGE NUMBER(5,2),
	STARTPERIOD NUMBER(2),
	DURATION NUMBER(2),
	COUPON VARCHAR2(32),
	RULENAME VARCHAR2(32),
	MARKUP NUMBER(5,2),
	APPLYBEFORETAX NUMBER(1),
	EXTERNAL NUMBER(1),
	BASECHARGETYPECODE VARCHAR2(32),
	VERSIONCOMMITDATE DATE,
	CONSTRAINT PK_CWPC_CHARGETYPE_V PRIMARY KEY(CHARGETYPEVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_CHARGETYPE_V ON CWPC_CHARGETYPE_V(CHARGETYPEVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_CHARGETYPERELATION_V(
	CHARGETYPERELATIONVERSIONID VARCHAR2(32) NOT NULL,
	CHARGETYPERELATIONCODE VARCHAR2(32),
	CHARGETYPERELATIONTARGET VARCHAR2(32),
	ASSOCIATIONTYPE VARCHAR2(32),
	CHARGETYPECODE VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	SEQUENCE NUMBER(4),
	MIN_QUANTITY NUMBER(4),
	MAX_QUANTITY NUMBER(4),
	STARTDATE DATE,
	ENDDATE DATE,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	CANCEL NUMBER(1),
	DEFAULTQUANTITY NUMBER(4),
	VERSIONCOMMITDATE DATE,
	CATALOGOBJECTTYPE VARCHAR2(32),
	CONSTRAINT PK_CWPC_CHARGETYPERELATION_V PRIMARY KEY(CHARGETYPERELATIONVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_CHARGETYPERELATION_V ON CWPC_CHARGETYPERELATION_V(CHARGETYPERELATIONVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_CTATTRIBUTE_V(
	CTATTRVERSIONID VARCHAR2(32) NOT NULL,
	ATTRIBUTECODE VARCHAR2(32),
	CTCODE VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	CTATTRIBUTECODE VARCHAR2(32),
	CTRELATIONCODE VARCHAR2(32),
	STARTDATE DATE,
	ENDDATE DATE,
	SEQUENCE NUMBER(4),
	ISPROPERTY NUMBER(1),
	DEFAULTVALUE VARCHAR2(2048),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	STATUS VARCHAR2(3),
	CATALOGOBJECTTYPE VARCHAR2(20),
	CANCEL NUMBER(1),
	ASSOCIATIONTYPE VARCHAR2(32),
	ISDEFAULTVALUEFORMULA NUMBER(1),
	VERSIONCOMMITDATE DATE,
	CLASSIFICATIONTYPES VARCHAR2(512),
	CONSTRAINT PK_CWPC_CTATTRIBUTE_V PRIMARY KEY(CTATTRVERSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_CTATTRIBUTE_V ON CWPC_CTATTRIBUTE_V(CTATTRVERSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_chargeType(
	CHARGETYPECODE VARCHAR2(32) NOT NULL,
	TYPE VARCHAR2(4),
	OWNERID VARCHAR2(32),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_chargeType PRIMARY KEY(CHARGETYPECODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_chargeType ON cwpc_chargeType(CHARGETYPECODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_catalogRule_v(
	CATALOGRULEID VARCHAR2(32) NOT NULL,
	RULENAME VARCHAR2(32),
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	STARTDATE DATE,
	ENDDATE DATE,
	STATUS VARCHAR2(3),
	RULESCRIPT NCLOB,
	OWNERID VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	LANGUAGE VARCHAR2(3),
	VERSIONCOMMITDATE DATE,
	INFOTABLEID VARCHAR2(32),
	MRULEDEFAULTVALUE VARCHAR2(32),
	CATEGORY VARCHAR2(32),
	SUBCATEGORY VARCHAR2(32),
	CONSTRAINT PK_cwpc_catalogRule_v PRIMARY KEY(CATALOGRULEID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_catalogRule_v ON cwpc_catalogRule_v(CATALOGRULEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_catalogRule(
	RULENAME VARCHAR2(32) NOT NULL,
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	RULETYPE VARCHAR2(1),
	RETURNTYPE VARCHAR2(1),
	RULESPACESPECIFICATIONCODE VARCHAR2(32),
	DATESMODELCODE VARCHAR2(32),
	INFOTABLECODE VARCHAR2(32),
	ENTITYTYPE VARCHAR2(16),
	CONSTRAINT PK_cwpc_catalogRule PRIMARY KEY(RULENAME) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_catalogRule ON cwpc_catalogRule(RULENAME) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_CATALOGUIPREFERENCES(
	ID VARCHAR2(16) NOT NULL,
	USERID VARCHAR2(32),
	CATALOGOBJECTTYPE VARCHAR2(128),
	CATALOGOBJECTCODE VARCHAR2(32),
	PREFERENCECATEGORY VARCHAR2(32),
	PREFERENCEVALUE VARCHAR2(64),
	UPDATEDBY VARCHAR2(32),
	LASTUPDATEDDATE DATE,
	CREATEDBY VARCHAR2(32),
	CREATEDDATE DATE,
	CONSTRAINT PK_CWPC_CATALOGUIPREFERENCES PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_CATALOGUIPREFERENCES ON CWPC_CATALOGUIPREFERENCES(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_catalogDomain(
	CATALOGDOMAINID VARCHAR2(10) NOT NULL,
	CATALOGTYPE VARCHAR2(64),
	CATALOGID VARCHAR2(32),
	ORGCHARTID VARCHAR2(32),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CONSTRAINT PK_cwpc_catalogDomain PRIMARY KEY(CATALOGDOMAINID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_catalogDomain ON cwpc_catalogDomain(CATALOGDOMAINID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_BUSINESSDATESVALUE(
	ID VARCHAR2(32) NOT NULL,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	DATE_1 DATE,
	DATE_2 DATE,
	DATE_3 DATE,
	DATE_4 DATE,
	DATE_5 DATE,
	DATE_6 DATE,
	DATE_7 DATE,
	DATE_8 DATE,
	CONSTRAINT PK_CWPC_BUSINESSDATESVALUE PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_BUSINESSDATESVALUE ON CWPC_BUSINESSDATESVALUE(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_attribute(
	ATTRIBUTECODE VARCHAR2(32) NOT NULL,
	NAME VARCHAR2(128),
	LABEL VARCHAR2(10),
	DESCRIPTION VARCHAR2(1024),
	STATUS VARCHAR2(3),
	STARTDATE DATE,
	ENDDATE DATE,
	TYPE VARCHAR2(2),
	LENGTH NUMBER(4),
	PRECISION NUMBER(2),
	CODETABLENAME VARCHAR2(32),
	OWNERID VARCHAR2(32),
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_attribute PRIMARY KEY(ATTRIBUTECODE) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_attribute ON cwpc_attribute(ATTRIBUTECODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_associationAttrValue(
	ASSOCIATIONTYPEATTRVALUEID VARCHAR2(16) NOT NULL,
	ASSOCIATIONTYPEATTRID VARCHAR2(32),
	RESTRICTIONID VARCHAR2(32),
	VALUE VARCHAR2(512),
	OWNERID VARCHAR2(32),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	CWDOCSTAMP VARCHAR2(9),
	CONSTRAINT PK_cwpc_associationAttrValue PRIMARY KEY(ASSOCIATIONTYPEATTRVALUEID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_associationAttrValue ON cwpc_associationAttrValue(ASSOCIATIONTYPEATTRVALUEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.cwpc_permission(
	PERMISSIONID VARCHAR2(32) NOT NULL,
	OBJECTTYPE VARCHAR2(20),
	ACTION VARCHAR2(4),
	PRIVILEGE VARCHAR2(16),
	TYPE VARCHAR2(32),
	CONSTRAINT PK_cwpc_permission PRIMARY KEY(PERMISSIONID) USING INDEX
	(CREATE UNIQUE INDEX PK_cwpc_permission ON cwpc_permission(PERMISSIONID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPC_CATALOGCONFIGURATION(
	CATALOGNODE VARCHAR2(64) NOT NULL,
	CATALOGDATE DATE,
	CURRENCY VARCHAR2(3),
	MARKUP NUMBER(5,2),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	SHOWALLVERSIONS NUMBER(1),
	ENABLEPLMMODE NUMBER(1),
	ENABLEDELTA NUMBER(1),
	ACTIVATEWITHVALIDATIONERRORS NUMBER(1),
	CONSTRAINT PK_CWPC_CATALOGCONFIGURATION PRIMARY KEY(CATALOGNODE) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPC_CATALOGCONFIGURATION ON CWPC_CATALOGCONFIGURATION(CATALOGNODE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPL_plmStages(
	STAGE VARCHAR2(32) NOT NULL,
	LABEL VARCHAR2(128),
	CONSTRAINT PK_CWPL_plmStages PRIMARY KEY(STAGE) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPL_plmStages ON CWPL_plmStages(STAGE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPL_plmParticipants(
	PARTICIPANT VARCHAR2(32) NOT NULL,
	LABEL VARCHAR2(128),
	CONSTRAINT PK_CWPL_plmParticipants PRIMARY KEY(PARTICIPANT) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPL_plmParticipants ON CWPL_plmParticipants(PARTICIPANT) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPL_configTemplate(
	CONFIGNAME VARCHAR2(64) NOT NULL,
	LABEL VARCHAR2(10),
	DOCONCEPTION NUMBER(1),
	DOEVALUATION NUMBER(1),
	DODEFINITION NUMBER(1),
	DOBUILD NUMBER(1),
	DOTESTING NUMBER(1),
	DOLAUNCHPRODUCT NUMBER(1),
	CONCEPTIONPRIORITY NUMBER(10),
	EVALUATIONPRIORITY NUMBER(10),
	DEFINITIONPRIORITY NUMBER(10),
	BUILDPRIORITY NUMBER(10),
	TESTINGPRIORITY NUMBER(10),
	LAUNCHPRODUCTPRIORITY NUMBER(10),
	CONSTRAINT PK_CWPL_configTemplate PRIMARY KEY(CONFIGNAME) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPL_configTemplate ON CWPL_configTemplate(CONFIGNAME) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPL_configStage(
	CONFIGNAME VARCHAR2(32) NOT NULL,
	STAGE VARCHAR2(32) NOT NULL,
	PRIORITY NUMBER(10),
	PERFORM NUMBER(1),
	CONSTRAINT PK_CWPL_configStage PRIMARY KEY(CONFIGNAME,STAGE) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPL_configStage ON CWPL_configStage(CONFIGNAME,STAGE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPL_config(
	ID VARCHAR2(16) NOT NULL,
	CONFIGNAME VARCHAR2(32),
	TASKSTAGE VARCHAR2(32),
	PARTICIPANTS VARCHAR2(32),
	ACTION NUMBER(1),
	INSTANCES NUMBER(10),
	CONSTRAINT PK_CWPL_config PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPL_config ON CWPL_config(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPL_changeRequestDates(
	ID VARCHAR2(16) NOT NULL,
	CHANGEREQUESTID VARCHAR2(16),
	PARTICIPANTS VARCHAR2(32),
	TASKSTAGE VARCHAR2(32),
	DUEDATE DATE,
	USERID VARCHAR2(64),
	ACTION NUMBER(1),
	CONSTRAINT PK_CWPL_changeRequestDates PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPL_changeRequestDates ON CWPL_changeRequestDates(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPL_changeRequest(
	ID VARCHAR2(16) NOT NULL,
	STATUS VARCHAR2(3),
	OBJECTSTATE VARCHAR2(3),
	PROJECTID VARCHAR2(32),
	ERRORLIST VARCHAR2(1024),
	PROPAGATESTATUSCHANGE NUMBER(1),
	CWORDERID VARCHAR2(16),
	CWPARENTID VARCHAR2(16),
	CONFIGNAME VARCHAR2(32),
	APPROVALFROM VARCHAR2(2),
	MAACTION VARCHAR2(3),
	PMACTION VARCHAR2(3),
	PEACTION VARCHAR2(3),
	BAACTION VARCHAR2(3),
	NOACTION VARCHAR2(3),
	PRACTION VARCHAR2(3),
	ITACTION VARCHAR2(3),
	RAACTION VARCHAR2(3),
	ISINAPPROVALPHASE NUMBER(1),
	ISINACTIONPHASE NUMBER(1),
	CONSTRAINT PK_CWPL_changeRequest PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPL_changeRequest ON CWPL_changeRequest(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_SOFTASHISTORY(
	TIMEPERIODID VARCHAR2(10) NOT NULL,
	TIMEPERIODTYPE VARCHAR2(32),
	TIMEPERIOD DATE,
	TP_DATE DATE,
	TP_HOUR VARCHAR2(2),
	FPSREF VARCHAR2(16) NOT NULL,
	TASREF VARCHAR2(16) NOT NULL,
	PARTICIPANT VARCHAR2(256),
	TASSTARTED NUMBER(9),
	TASCOMPLETED NUMBER(9),
	TASCOMPLETEDWITHACTION NUMBER(9),
	TASCOMPLETEDREJECTED NUMBER(9),
	TASCOMPLETEDNOTREQUIRED NUMBER(9),
	TASCANCELLED NUMBER(9),
	TASACTIVE NUMBER(9),
	CONSTRAINT PK_CWT_SOFTASHISTORY PRIMARY KEY(TIMEPERIODID,FPSREF,TASREF) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_SOFTASHISTORY ON CWT_SOFTASHISTORY(TIMEPERIODID,FPSREF,TASREF) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_SOFFPSHISTORY(
	TIMEPERIODID VARCHAR2(10) NOT NULL,
	TIMEPERIODTYPE VARCHAR2(32),
	TIMEPERIOD DATE,
	TP_DATE DATE,
	TP_HOUR VARCHAR2(2),
	FPSREF VARCHAR2(16) NOT NULL,
	STATE VARCHAR2(16) NOT NULL,
	STARTED NUMBER(9),
	COMPLETED NUMBER(9),
	ACTIVE NUMBER(9),
	CONSTRAINT PK_CWT_SOFFPSHISTORY PRIMARY KEY(TIMEPERIODID,FPSREF,STATE) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_SOFFPSHISTORY ON CWT_SOFFPSHISTORY(TIMEPERIODID,FPSREF,STATE) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_SOFHISTORY(
	TIMEPERIOD DATE NOT NULL,
	TP_DATE DATE,
	TP_HOUR VARCHAR2(2),
	FPSREF VARCHAR2(16),
	FPSSTARTED NUMBER(9),
	FPSCOMPLETED NUMBER(9),
	FPSACTIVE NUMBER(9),
	TASSTARTED NUMBER(9),
	TASCOMPLETED NUMBER(9),
	TASACTIVE NUMBER(9),
	ERRORSMESSAGES NUMBER(9),
	ERRORSEVENTLOG NUMBER(9),
	CONSTRAINT PK_CWT_SOFHISTORY PRIMARY KEY(TIMEPERIOD) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_SOFHISTORY ON CWT_SOFHISTORY(TIMEPERIOD) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.params(
	NAME VARCHAR2(64),
	VALUE VARCHAR2(256),
	CWDOCID VARCHAR2(16) NOT NULL,
	CONSTRAINT PK_params PRIMARY KEY(CWDOCID) USING INDEX
	(CREATE UNIQUE INDEX PK_params ON params(CWDOCID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_MICROFLOW(
	CODE VARCHAR2(64),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	DESCRIPTION VARCHAR2(128),
	EMAILBODY VARCHAR2(4000),
	EMAILFROM VARCHAR2(50),
	EMAILSUBJECT VARCHAR2(50),
	EMAILTO VARCHAR2(50),
	ID VARCHAR2(16) NOT NULL,
	LABEL VARCHAR2(128),
	LASTUPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	METADATANAME VARCHAR2(128),
	METADATAPARAMETER VARCHAR2(256),
	PARAMETERS VARCHAR2(1024),
	PARTICIPANT VARCHAR2(256),
	PARTICIPANTMESSAGE VARCHAR2(128),
	PARTICIPANTOPERATION VARCHAR2(256),
	PARTICIPANTOPERATIONNS NUMBER(1),
	PARTICIPANTVARIABLE NUMBER(1),
	STATE VARCHAR2(16),
	CONSTRAINT PK_CWT_MICROFLOW PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_MICROFLOW ON CWT_MICROFLOW(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_CONTROLLERINVALIDMSG(
	CWDOCID VARCHAR2(16) NOT NULL,
	CWUPDATED DATE,
	CWUPDATEDBY VARCHAR2(64),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CORRELATIONID VARCHAR2(16),
	QUEUE VARCHAR2(128),
	OPERATION VARCHAR2(16),
	MESSAGEMETADATATYPE VARCHAR2(128),
	ACTIONEDTIMESTAMP DATE,
	ERRORTIMESTAMP DATE,
	ACTIVE NUMBER(1),
	EXCEPTIONDESCRIPTION VARCHAR2(4000),
	MESSAGE NCLOB,
	CONSTRAINT PK_CWT_CONTROLLERINVALIDMSG PRIMARY KEY(CWDOCID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_CONTROLLERINVALIDMSG ON CWT_CONTROLLERINVALIDMSG(CWDOCID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_TASSLA(
	CWDOCID VARCHAR2(16) NOT NULL,
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	CWUPDATED DATE,
	CWUPDATEDBY VARCHAR2(64),
	TASREF VARCHAR2(16),
	SLATYPE VARCHAR2(2),
	CONDITIONAL NUMBER(1),
	CONDITIONDESCRIPTION VARCHAR2(128),
	PRIORITY NUMBER(2),
	DURATION NUMBER(5),
	DURATIONTYPE NUMBER(9),
	EFFORT NUMBER(5),
	EFFORTTYPE NUMBER(9),
	CONSTRAINT PK_CWT_TASSLA PRIMARY KEY(CWDOCID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_TASSLA ON CWT_TASSLA(CWDOCID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_TAS(
	ID VARCHAR2(16) NOT NULL,
	OPERATION VARCHAR2(128),
	STATE VARCHAR2(16),
	DESCRIPTION VARCHAR2(128),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	LASTUPDATEDBY VARCHAR2(64),
	NAME VARCHAR2(64),
	PARTICIPANTVARIABLE NUMBER(1),
	PARTICIPANT VARCHAR2(256),
	PARTICIPANTOPERATION VARCHAR2(256),
	PARTICIPANTOPERATIONNS NUMBER(1),
	PARTICIPANTMESSAGE VARCHAR2(128),
	ALERTONOVERDUE NUMBER(1),
	ALERTDURATION NUMBER(5),
	ALERTDURATION2 NUMBER(5),
	ALERTDURATIONTYPE NUMBER(9),
	ALERTDURATIONTYPE2 NUMBER(9),
	ALERTPARTICIPANT VARCHAR2(256),
	ALERTPARTICIPANT2 VARCHAR2(256),
	LABEL VARCHAR2(128),
	PARAMETERS VARCHAR2(1024),
	TYPE VARCHAR2(2),
	MICROFLOWREF VARCHAR2(16),
	ITERATOR VARCHAR2(32),
	CONDITIONTYPE VARCHAR2(16),
	CONDITIONDESCRIPTION VARCHAR2(128),
	CONDITIONAL NUMBER(1),
	DYNAMICTASKDETAILS NUMBER(1),
	POLLINGCONDITIONDESCRIPTION VARCHAR2(128),
	SCRIPTDESCRIPTION VARCHAR2(128),
	EMAILFROM VARCHAR2(50),
	EMAILTO VARCHAR2(50),
	EMAILSUBJECT VARCHAR2(50),
	EMAILBODY VARCHAR2(4000),
	SUBFLOWFPSREF VARCHAR2(16),
	SUBFLOWVERSIONINGMODEL VARCHAR2(1),
	TASKSTAGE VARCHAR2(32),
	ISLISTENER NUMBER(1),
	ISAUTO NUMBER(1),
	CONSTRAINT PK_CWT_TAS PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_TAS ON CWT_TAS(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_TAI_PREREQUISITE(
	ID VARCHAR2(16) NOT NULL,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	STATE VARCHAR2(16),
	TAIREF VARCHAR2(16),
	PREREQUISITETAIREF VARCHAR2(16),
	STARTED DATE,
	COMPLETED DATE,
	CONSTRAINT PK_CWT_TAI_PREREQUISITE PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_TAI_PREREQUISITE ON CWT_TAI_PREREQUISITE(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_TAI(
	ID VARCHAR2(16) NOT NULL,
	PARTICIPANTVARIABLE NUMBER(1),
	PARTICIPANT VARCHAR2(256),
	PARTICIPANTOPERATION VARCHAR2(256),
	PARTICIPANTOPERATIONNS NUMBER(1),
	PARTICIPANTMESSAGE VARCHAR2(128),
	STATE VARCHAR2(16),
	LABEL VARCHAR2(128),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	LASTUPDATEDBY VARCHAR2(64),
	FPIREF VARCHAR2(16),
	FPSREF VARCHAR2(16),
	TASREF VARCHAR2(16),
	TASREFONJEOPARDY VARCHAR2(16),
	TASREFONROLLBACK VARCHAR2(16),
	NAME VARCHAR2(64),
	PARAMETERS VARCHAR2(1024),
	TYPE VARCHAR2(2),
	CONDITION VARCHAR2(128),
	CONDITIONAL NUMBER(1),
	CONDITIONTYPE VARCHAR2(16),
	ITERATOR VARCHAR2(32),
	MICROFLOWREF VARCHAR2(16),
	ORDERID VARCHAR2(16),
	ORDERITEMID VARCHAR2(16),
	ORDERITEMVISUALKEY VARCHAR2(64),
	PROCESSID NUMBER(16),
	STARTED DATE,
	COMPLETED DATE,
	COMPLETEDWITHOPERATION VARCHAR2(16),
	EARLIESTSTART DATE,
	EARLIESTEND DATE,
	PLANNEDSTART DATE,
	PLANNEDEND DATE,
	EXPECTEDSTART DATE,
	EXPECTEDEND DATE,
	PRIORITY NUMBER(2),
	EFFORT NUMBER(5),
	EFFORTTYPE NUMBER(9),
	DURATION NUMBER(5),
	DURATIONTYPE NUMBER(9),
	ALERTONOVERDUE NUMBER(1),
	ALERTDURATION NUMBER(5),
	ALERTDURATIONTYPE NUMBER(9),
	ALERTDURATION2 NUMBER(5),
	ALERTDURATIONTYPE2 NUMBER(9),
	ALERTPARTICIPANT VARCHAR2(256),
	ALERTPARTICIPANT2 VARCHAR2(256),
	ALERTSISSUED NUMBER(9),
	EMAILFROM VARCHAR2(50),
	EMAILTO VARCHAR2(50),
	EMAILSUBJECT VARCHAR2(50),
	EMAILBODY VARCHAR2(4000),
	PERCENTCOMPLETE NUMBER(3),
	LOCKSLA NUMBER(1),
	LOCKPARTICIPANTMESSAGE NUMBER(1),
	TRIGGERINGTAIREF VARCHAR2(16),
	JEOPARDY NUMBER(1),
	EVENTID VARCHAR2(16),
	SORTSEQUENCE VARCHAR2(64),
	FPSTASREF VARCHAR2(16),
	ISAUTO NUMBER(1),
	ISLISTENER NUMBER(1),
	CONSTRAINT PK_CWT_TAI PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_TAI ON CWT_TAI(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_SUSCFS(
	ID VARCHAR2(16) NOT NULL,
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	SUSREF VARCHAR2(16),
	CFSREF VARCHAR2(32),
	STATE VARCHAR2(16),
	SUS VARCHAR2(64),
	CFS VARCHAR2(64),
	CONSTRAINT PK_CWT_SUSCFS PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_SUSCFS ON CWT_SUSCFS(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_SUS(
	ID VARCHAR2(16) NOT NULL,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	UPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	NAME VARCHAR2(64),
	STATE VARCHAR2(16),
	SUSCFSREF VARCHAR2(16),
	HASHCODE VARCHAR2(32),
	CONSTRAINT PK_CWT_SUS PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_SUS ON CWT_SUS(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_STS(
	ID VARCHAR2(16) NOT NULL,
	STATE VARCHAR2(16),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	LASTUPDATEDBY VARCHAR2(64),
	CURRENTSUSREF VARCHAR2(16),
	DESIREDSUSREF VARCHAR2(16),
	FPSREF VARCHAR2(16),
	PARAMETERS VARCHAR2(1024),
	CONSTRAINT PK_CWT_STS PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_STS ON CWT_STS(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_FPSTAS_PREREQUISITE(
	ID VARCHAR2(16) NOT NULL,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	STATE VARCHAR2(16),
	FPSTASREF VARCHAR2(16),
	FPSTASPREREQUISITEREF VARCHAR2(16),
	OPERATION VARCHAR2(16),
	CONDITION VARCHAR2(1024),
	CONSTRAINT PK_CWT_FPSTAS_PREREQUISITE PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_FPSTAS_PREREQUISITE ON CWT_FPSTAS_PREREQUISITE(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_FPSTAS(
	ID VARCHAR2(16) NOT NULL,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	STATE VARCHAR2(16),
	FPSREF VARCHAR2(16),
	TASREF VARCHAR2(16),
	TASREFONJEOPARDY VARCHAR2(16),
	TASREFONROLLBACK VARCHAR2(16),
	FPSTASREFONREJECT VARCHAR2(16),
	SORTSEQUENCE NUMBER(5),
	CODE VARCHAR2(64),
	LABEL VARCHAR2(128),
	DESCRIPTION VARCHAR2(128),
	CONSTRAINT PK_CWT_FPSTAS PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_FPSTAS ON CWT_FPSTAS(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_FPS_SPECIFICATION(
	ID VARCHAR2(16) NOT NULL,
	SPECNAME VARCHAR2(128),
	CONSTRAINT PK_CWT_FPS_SPECIFICATION PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_FPS_SPECIFICATION ON CWT_FPS_SPECIFICATION(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_FPS_ATTRIBUTES(
	ID VARCHAR2(16) NOT NULL,
	NAME VARCHAR2(128) NOT NULL,
	DATATYPE VARCHAR2(128),
	DESCRIPTION VARCHAR2(128),
	DEFAULTVALUE VARCHAR2(128),
	SPECID VARCHAR2(32),
	CONSTRAINT PK_CWT_FPS_ATTRIBUTES PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_FPS_ATTRIBUTES ON CWT_FPS_ATTRIBUTES(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_FPS(
	ID VARCHAR2(16) NOT NULL,
	NAME VARCHAR2(64),
	FPSVERSION NUMBER(5),
	STATE VARCHAR2(16),
	LABEL VARCHAR2(128),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	LASTUPDATEDBY VARCHAR2(64),
	FPSTASREF VARCHAR2(16),
	PRIORITY NUMBER(2),
	DURATION NUMBER(5),
	DURATIONTYPE NUMBER(9),
	NEXTFPSREF VARCHAR2(16),
	FPSSPECREF VARCHAR2(16),
	CONSTRAINT PK_CWT_FPS PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_FPS ON CWT_FPS(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_FPISCHED(
	ID VARCHAR2(16) NOT NULL,
	FPSREF VARCHAR2(16),
	EFFECTIVEDATE DATE,
	ORDERID VARCHAR2(16),
	ORDERITEMID VARCHAR2(16),
	LABELPREFIX VARCHAR2(128),
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	CONSTRAINT PK_CWT_FPISCHED PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_FPISCHED ON CWT_FPISCHED(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_FPI(
	ID VARCHAR2(16) NOT NULL,
	STATE VARCHAR2(16),
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	LASTUPDATEDBY VARCHAR2(64),
	NAME VARCHAR2(64),
	LABEL VARCHAR2(128),
	ORDERID VARCHAR2(16),
	ORDERITEMID VARCHAR2(16),
	PROCESSID NUMBER(16),
	STARTED DATE,
	SUSPENDED DATE,
	RESUMED DATE,
	COMPLETED DATE,
	FPSREF VARCHAR2(16),
	PRIORITY NUMBER(2),
	DURATION NUMBER(5),
	DURATIONTYPE NUMBER(9),
	NEXTFPSREF VARCHAR2(16),
	CONSTRAINT PK_CWT_FPI PRIMARY KEY(ID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_FPI ON CWT_FPI(ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWT_CFS(
	CFSID VARCHAR2(16) NOT NULL,
	CWCREATEDBY VARCHAR2(64),
	CWCREATED DATE,
	LASTUPDATEDDATE DATE,
	LASTUPDATEDBY VARCHAR2(64),
	CFSNAME VARCHAR2(64),
	STATE VARCHAR2(16),
	CONSTRAINT PK_CWT_CFS PRIMARY KEY(CFSID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWT_CFS ON CWT_CFS(CFSID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPWORKLISTNOTESARCHIVE(
	TASKNOTEID VARCHAR2(16) NOT NULL,
	CREATEDBY VARCHAR2(64),
	CREATEDON DATE,
	NOTES_BLOB NCLOB,
	TASKID VARCHAR2(32),
	CONSTRAINT PK_CWPWORKLISTNOTESARCHIVE PRIMARY KEY(TASKNOTEID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPWORKLISTNOTESARCHIVE ON CWPWORKLISTNOTESARCHIVE(TASKNOTEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

CREATE TABLE upadmin.CWPWORKLISTNOTES(
	TASKNOTEID VARCHAR2(16) NOT NULL,
	TASKID VARCHAR2(32),
	NOTES_BLOB NCLOB,
	CREATEDON DATE,
	CREATEDBY VARCHAR2(64),
	CONSTRAINT PK_CWPWORKLISTNOTES PRIMARY KEY(TASKNOTEID) USING INDEX
	(CREATE UNIQUE INDEX PK_CWPWORKLISTNOTES ON CWPWORKLISTNOTES(TASKNOTEID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
)
TABLESPACE &DEFAULT_TABLESPACE_TABLE;

-- By default, display all the versions for catalog objects
UPDATE CWPC_CATALOGCONFIGURATION SET SHOWALLVERSIONS = 1;

-- Set the default language of Rules to be catalog rule
UPDATE CWPC_CATALOGRULE_V SET LANGUAGE = 'CR' WHERE LANGUAGE is null;
UPDATE CWPC_ITEMRULE_V SET LANGUAGE = 'CR' WHERE RULENAME is null and LANGUAGE is null;

-- Use Type field instead of isDiscount in chargeType table
UPDATE CWPC_CHARGETYPE SET TYPE = 'DISC' WHERE ISDISCOUNT = 1;
UPDATE CWPC_CHARGETYPE SET TYPE = 'CHAG' WHERE ISDISCOUNT = 0;
ALTER TABLE CWPC_CHARGETYPE DROP (ISDISCOUNT);

-- Catalog domain record for project should contain projectId instead of project code
UPDATE CWPC_CATALOGDOMAIN CD 
	SET CD.CATALOGID = (SELECT PROJECTID FROM CWPC_PROJECT WHERE PROJECTCODE = CD.CATALOGID) 
	WHERE CD.CATALOGTYPE = 'cwt_pc:cwt_project' 
		AND CD.CATALOGID IN (SELECT PROJECTCODE FROM CWPC_PROJECT);

-- When delete a projectCommand from database, an auditing record for this action should be inserted into the audit tables.
create or replace PROCEDURE cwpc_on_remove(objectId IN varchar2, objectCode IN varchar2, objectType IN varchar2)
AS
  v_pAcount NUMBER;
  v_paID VARCHAR2(256);
  v_recNo VARCHAR2(16);
	v_paMetadataType VARCHAR2(9);
	v_projectId VARCHAR2(10);
	v_projectCode VARCHAR2(32);
BEGIN
	select TYPEID into v_paMetadataType from CWMDTYPES where TYPENAME = 'cwt_pc:cwt_projectAssignment' AND ROWNUM = 1;
	
	IF objectCode IS NOT NULL and objectId is not null THEN
	  SELECT COUNT(*) INTO v_pAcount FROM CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
	  IF v_pAcount > 0 THEN
	    select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;
	    select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;
	    select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
	  END IF;
		DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;   
	ELSE 
		IF objectCode is null THEN
		  SELECT COUNT(*) INTO v_pAcount FROM CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
	    IF v_pAcount > 0 THEN
		    select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;
	      select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;
	      select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
	    END IF;
			DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;
		ELSE 
			IF objectId is null THEN
			  SELECT COUNT(*) INTO v_pAcount FROM CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType AND ROWNUM = 1;
	      IF v_pAcount > 0 THEN
				  select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType;
	        select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType;
	        select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
	      END IF;
				DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType;
			END IF;
		END IF;
	END IF;
	
	IF v_paID IS NOT NULL THEN
	  insert into cwAuditTrail(recNo,docId,docMetadataType,topOrderMetaDataType,UPDATEDBY,LASTUPDATEDDATE,operationType) 
	  values(CWAUDITTRAILSEQ.NEXTVAL, v_paID, v_paMetadataType, -1, 'upadmin', SYSDATE, 'Del')
	  returning RECNO into v_recNo;
	END IF;
	IF v_recNo IS NOT NULL AND v_projectCode IS NOT NULL THEN
    INSERT INTO CWPROJECTAUDITTRAIL VALUES(v_recNo, v_projectCode);
  END IF;
END;
/

-- Add prefix for all the catalog-related tables
-- drop the tables that are created by the catalog upgrade script
DECLARE
	table_exists NUMBER;
	s_sql VARCHAR2(500);
BEGIN
	SELECT COUNT(*) INTO table_exists FROM user_tables WHERE TABLE_NAME = 'CHANGEREQUEST' AND ROWNUM = 1;
	IF table_exists = 1 THEN
		s_sql := 'DROP TABLE CWPL_changeRequest';
		EXECUTE IMMEDIATE s_sql;
		s_sql := 'ALTER TABLE changeRequest RENAME TO CWPL_changeRequest';	
		EXECUTE IMMEDIATE s_sql;
	END IF;
	
	SELECT COUNT(*) INTO table_exists FROM user_tables WHERE TABLE_NAME = 'CHANGEREQUESTDATES' AND ROWNUM = 1;
	IF table_exists = 1 THEN
		s_sql := 'DROP TABLE CWPL_CHANGEREQUESTDATES';
		EXECUTE IMMEDIATE s_sql;
		s_sql := 'ALTER TABLE CHANGEREQUESTDATES RENAME TO CWPL_CHANGEREQUESTDATES';
		EXECUTE IMMEDIATE s_sql;
	END IF;

	SELECT COUNT(*) INTO table_exists FROM user_tables WHERE TABLE_NAME = 'CONFIG' AND ROWNUM = 1;
	IF table_exists = 1 THEN
		s_sql := 'DROP TABLE CWPL_CONFIG';
		EXECUTE IMMEDIATE s_sql;
		s_sql := 'ALTER TABLE CONFIG RENAME TO CWPL_CONFIG';	
		EXECUTE IMMEDIATE s_sql;
	END IF;

	SELECT COUNT(*) INTO table_exists FROM user_tables WHERE TABLE_NAME = 'CONFIGTEMPLATE' AND ROWNUM = 1;
	IF table_exists = 1 THEN
		s_sql := 'DROP TABLE CWPL_CONFIGTEMPLATE';
		EXECUTE IMMEDIATE s_sql;
		s_sql := 'ALTER TABLE CONFIGTEMPLATE RENAME TO CWPL_CONFIGTEMPLATE';
		EXECUTE IMMEDIATE s_sql;
	END IF;	

END;
/


-- Add default rule for step pricing

BEGIN
INSERT
INTO CWPC_CATALOGRULE
  (
    RULENAME,
    RULETYPE,
    RETURNTYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'flat_rate_band_method',
    'P',
    NULL,
    NULL,
    'u',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
  
INSERT
INTO CWPC_CATALOGRULE
  (
    RULENAME,
    RULETYPE,
    RETURNTYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'band_method',
    'P',
    NULL,
    NULL,
    'u',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
  
INSERT
INTO CWPC_CATALOGRULE
  (
    RULENAME,
    RULETYPE,
    RETURNTYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'stepped_method',
    'P',
    NULL,
    NULL,
    'u',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
commit;

INSERT
INTO CWPC_CATALOGRULE_V
  (
    CATALOGRULEID,
    NAME,
    RULENAME,
    LABEL,
    STARTDATE,
    ENDDATE,
    STATUS,
    RULESCRIPT,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP,
    DESCRIPTION,
    LANGUAGE
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'flat_rate_band_method',
    'flat_rate_band_method',
    'Flat Band',
    to_timestamp('10-08-27','RR-MM-DD HH24:MI:SSXFF'),
    NULL,
    'ACT',
    'var Number result;
var Row tmpRow;
for each tmpRow in select many rows from the_price_table where quantity >= the_quantity order by quantity
	result = tmpRow.price;
	return result;
end',
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL,
    NULL,
    'CR'
  );
  
INSERT
INTO CWPC_CATALOGRULE_V
  (
    CATALOGRULEID,
    NAME,
    RULENAME,
    LABEL,
    STARTDATE,
    ENDDATE,
    STATUS,
    RULESCRIPT,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP,
    DESCRIPTION,
    LANGUAGE
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'band_method',
    'band_method',
    'Band',
    to_timestamp('10-08-27','RR-MM-DD HH24:MI:SSXFF'),
    NULL,
    'ACT',
    'var Number result;
var Row tmpRow;
for each tmpRow in select many rows from the_price_table where quantity >= the_quantity order by quantity
	result = tmpRow.price * the_quantity;
	return result;
end',
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL,
    NULL,
    'CR'
  );
  
INSERT
INTO CWPC_CATALOGRULE_V
  (
    CATALOGRULEID,
    NAME,
    RULENAME,
    LABEL,
    STARTDATE,
    ENDDATE,
    STATUS,
    RULESCRIPT,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP,
    DESCRIPTION,
    LANGUAGE
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'stepped_method',
    'stepped_method',
    'Stepped',
    to_timestamp('10-08-27','RR-MM-DD HH24:MI:SSXFF'),
    NULL,
    'ACT',
    'var Number result = 0;
     var Number prevAmount = 0;
var Row tmpRow;
for each tmpRow in select many rows from the_price_table where quantity <= the_quantity order by quantity
	result = result + tmpRow.price * (tmpRow.quantity - prevAmount);
  prevAmount = tmpRow.quantity;
end
for each tmpRow in select many rows from the_price_table where quantity > the_quantity order by quantity
	result = result + tmpRow.price * (the_quantity - prevAmount);
  break;
end
return result;',
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL,
    NULL,
    'CR'
  );

commit;

INSERT
INTO CWPC_ATTRIBUTE
  (
    ATTRIBUTECODE,
    NAME,
    LABEL,
    DESCRIPTION,
    STARTDATE,
    ENDDATE,
    STATUS,
    TYPE,
    LENGTH,
    PRECISION,
    CODETABLENAME,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'stringAttribute',
    'stringAttribute',
    'String',
    NULL,
    to_timestamp('10-07-27 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'),
    NULL,
    'ACT',
    '3',
    0,0,
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
  
INSERT
INTO CWPC_ATTRIBUTE
  (
    ATTRIBUTECODE,
    NAME,
    LABEL,
    DESCRIPTION,
    STARTDATE,
    ENDDATE,
    STATUS,
    TYPE,
    LENGTH,
    PRECISION,
    CODETABLENAME,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'numberAttribute',
    'numberAttribute',
    'Number',
    NULL,
    to_timestamp('10-08-27 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'),
    NULL,
    'ACT',
    '0',
    7,2,
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );

commit;
  
INSERT
INTO CWPC_RULEPARAMETERS
  (
    RULEPARAMETERID,
    PARAMNAME,
    ATTRIBUTECODE,
    RULENAME,
    SEQUENCE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'the_quantity',
    'numberAttribute',
    'flat_rate_band_method',
    1,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
INSERT
INTO CWPC_RULEPARAMETERS
  (
    RULEPARAMETERID,
    PARAMNAME,
    ATTRIBUTECODE,
    RULENAME,
    SEQUENCE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'the_price_table',
    'stringAttribute',
    'flat_rate_band_method',
    2,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );

INSERT
INTO CWPC_RULEPARAMETERS
  (
    RULEPARAMETERID,
    PARAMNAME,
    ATTRIBUTECODE,
    RULENAME,
    SEQUENCE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'the_quantity',
    'numberAttribute',
    'band_method',
    1,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
  
INSERT
INTO CWPC_RULEPARAMETERS
  (
    RULEPARAMETERID,
    PARAMNAME,
    ATTRIBUTECODE,
    RULENAME,
    SEQUENCE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'the_price_table',
    'stringAttribute',
    'band_method',
    2,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );

INSERT
INTO CWPC_RULEPARAMETERS
  (
    RULEPARAMETERID,
    PARAMNAME,
    ATTRIBUTECODE,
    RULENAME,
    SEQUENCE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'the_quantity',
    'numberAttribute',
    'stepped_method',
    1,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
  
INSERT
INTO CWPC_RULEPARAMETERS
  (
    RULEPARAMETERID,
    PARAMNAME,
    ATTRIBUTECODE,
    RULENAME,
    SEQUENCE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    cwdocseq.NEXTVAL,
    'the_price_table',
    'stringAttribute',
    'stepped_method',
    2,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    NULL
  );
commit;
END;
/

ALTER TABLE CWPL_CONFIGTEMPLATE RENAME CONSTRAINT PK_CONFIGTEMPLATE TO PK_CWPL_CONFIGTEMPLATE;
ALTER INDEX PK_CONFIGTEMPLATE RENAME TO PK_CWPL_CONFIGTEMPLATE;

ALTER TABLE CWPL_CONFIG RENAME CONSTRAINT PK_CONFIG TO PK_CWPL_CONFIG;
ALTER INDEX PK_CONFIG RENAME TO PK_CWPL_CONFIG;

ALTER TABLE CWPL_CHANGEREQUESTDATES RENAME CONSTRAINT PK_CHANGEREQUESTDATES TO PK_CWPL_CHANGEREQUESTDATES;
ALTER INDEX PK_CHANGEREQUESTDATES RENAME TO PK_CWPL_CHANGEREQUESTDATES; 

ALTER TABLE CWPL_CHANGEREQUEST RENAME CONSTRAINT PK_CHANGEREQUEST TO PK_CWPL_CHANGEREQUEST;
ALTER INDEX PK_CHANGEREQUEST RENAME TO PK_CWPL_CHANGEREQUEST;

-- Add Java stored procedure for database sql import/export
CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "FileHandler" AS
import java.io.File;
public class FileHandler
{
  private static int SUCCESS = 1;
  private static  int FAILURE = 0;

  
  /**
   * Checks if a directory exists and if it is empty
   * @param directoryName
   * @return -1 if the directory doesn't exist. Otherwise, the number of files/sub-folders
   */
  public static int checkDirectoryOnDBServer(String directoryName) {
    try {
      if (directoryName==null) return -1;
      
      File[] listOfFiles = new File(directoryName).listFiles();
  
      return listOfFiles == null ? -1 : listOfFiles.length;
    } catch (Exception ex) {
      return -1;
    }
  }

  /**
   * Moves a file on the database server for backup purposes
   * @param conn The connection
   * @param directory The directory containing the file
   * @param fileName  The filename without path (e.g. MyFile.txt)
   * @param backupDirectory The backup directory, which is a sub-folder of
   * the directory containing the file. Will be created if not existed.
   * @return 1 = successful, 0 = error
   */
  public static int moveAFileOnDBServer(String directory, String fileName, String backupDirectory) {
    try {
      File file = new File(directory, fileName);
      File targetDir = new File(directory, backupDirectory);
      if (!targetDir.exists())
        targetDir.mkdir();
      file.renameTo(new File(targetDir, fileName));
      return SUCCESS;
    }
    catch (Exception ex) {
      return FAILURE;
    }
  }
  
  /**
   * Deleles files on the database server - filename can be specified as 
   * exact file name, prefix or ending 
   * @param conn The connection
   * @param directory The directory containing the files
   * @param fileNamePattern The file pattern
   * @param fileNamePatternType 
   * <li> "N": fileNamePattern contains the exact file name
   * <li> "P": fileNamePattern contains the file prefix
   * <li> "S": fileNamePattern contains the file suffix 
   * @param fileExtension The file extension, with . (e.g. ".log") 
   * @return 1 = successful, 0 = error
   */

  public static int deleteFilesOnDBServer(String directory, String fileNamePattern, String fileNamePatternType, String fileExtension) {
      try{
        File folder = new File(directory);
        File[] listOfFiles = folder.listFiles();
        for (int i = 0; i < listOfFiles.length; i++) {
          File sourceFile = listOfFiles[i];
          if (sourceFile.isFile()) {
            String fileName = sourceFile.getName();
            if (!fileName.endsWith(fileExtension)) continue;
            if ("N".equals(fileNamePatternType)) {       // Exact name match
              if (fileName.equals(fileNamePattern+fileExtension)) 
                sourceFile.delete();
            } 
            else if ("P".equals(fileNamePatternType)) {  // Prefix match 
              if (fileName.startsWith(fileNamePattern))
                sourceFile.delete();
            } 
            else if ("S".equals(fileNamePatternType)) {  // Suffix match
              if (fileName.endsWith(fileNamePattern+fileExtension))
                sourceFile.delete();
            }
          }
        }
        return SUCCESS;
        } catch(Exception ex) {
            return FAILURE;
        }
  }
  
    
};
/

CREATE OR REPLACE PACKAGE File_API AS

FUNCTION checkDirectoryOnDBServer (directory in VARCHAR2) RETURN NUMBER
AS LANGUAGE JAVA 
NAME 'FileHandler.checkDirectoryOnDBServer(java.lang.String) return java.lang.int';

FUNCTION moveAFileOnDBServer (directory in VARCHAR2, fileName in VARCHAR2, backupDirectory in VARCHAR2) RETURN NUMBER
AS LANGUAGE JAVA 
NAME 'FileHandler.moveAFileOnDBServer(java.lang.String, java.lang.String, java.lang.String) return java.lang.int';

FUNCTION deleteFilesOnDBServer (directory in VARCHAR2, fileNamePattern in VARCHAR2, fileNamePatternType in VARCHAR2, fileExtension in VARCHAR2) RETURN NUMBER
AS LANGUAGE JAVA 
NAME 'FileHandler.deleteFilesOnDBServer(java.lang.String, java.lang.String, java.lang.String, java.lang.String) return java.lang.int';

END File_API;
/

-- Improve the procedure cwpc_on_remove for ticket 14844
create or replace PROCEDURE cwpc_on_remove(objectId IN varchar2, objectCode IN varchar2, objectType IN varchar2)
AS
  v_pAcount NUMBER;
  v_paID VARCHAR2(256);
  v_recNo VARCHAR2(16);
	v_paMetadataType VARCHAR2(9);
	v_projectId VARCHAR2(10);
	v_projectCode VARCHAR2(32);
BEGIN
	select count(*) into v_pAcount from CWMDTYPES where TYPENAME = 'cwt_pc:cwt_projectAssignment' AND ROWNUM = 1;
	IF v_pAcount > 0 THEN

		select TYPEID into v_paMetadataType from CWMDTYPES where TYPENAME = 'cwt_pc:cwt_projectAssignment' AND ROWNUM = 1;
		
		IF objectCode IS NOT NULL and objectId is not null THEN
		  SELECT COUNT(*) INTO v_pAcount FROM CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
		  IF v_pAcount > 0 THEN
			select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType  AND ROWNUM = 1;
			select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType  AND ROWNUM = 1;
			select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
		  END IF;
			DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;   
		ELSE 
			IF objectCode is null THEN
			  SELECT COUNT(*) INTO v_pAcount FROM CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
			IF v_pAcount > 0 THEN
				select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
			  select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
			  select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
			END IF;
				DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;
			ELSE 
				IF objectId is null THEN
				  SELECT COUNT(*) INTO v_pAcount FROM CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType AND ROWNUM = 1;
			  IF v_pAcount > 0 THEN
					  select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType AND ROWNUM = 1;
				select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType AND ROWNUM = 1;
				select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
			  END IF;
					DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType;
				END IF;
			END IF;
		END IF;
		
		IF v_paID IS NOT NULL THEN
		  insert into cwAuditTrail(recNo,docId,docMetadataType,topOrderMetaDataType,UPDATEDBY,LASTUPDATEDDATE,operationType) 
		  values(CWAUDITTRAILSEQ.NEXTVAL, v_paID, v_paMetadataType, -1, 'upadmin', SYSDATE, 'Del')
		  returning RECNO into v_recNo;
		END IF;
		IF v_recNo IS NOT NULL AND v_projectCode IS NOT NULL THEN
			INSERT INTO CWPROJECTAUDITTRAIL VALUES(v_recNo, v_projectCode);
		END IF;
	END IF; 
END;
/

-- Add Index for item attribute search

CREATE INDEX IX_OBJECTCODE ON CWPC_RESTRICTION_V (CATALOGOBJECTCODE)
/
CREATE INDEX IX_STARTDATE ON CWPC_RESTRICTION_V (STARTDATE)
/
CREATE INDEX IX_ENDDATE ON CWPC_RESTRICTION_V (ENDDATE)
/
CREATE INDEX IX_ATTRIBUTE_STARTDATE ON CWPC_ITEMATTRIBUTE_V (STARTDATE)
/
CREATE BITMAP INDEX IX_ATTRIBUTE_CANCEL ON CWPC_ITEMATTRIBUTE_V (CANCEL ASC)
/
CREATE BITMAP INDEX IX_ATTRIBUTE_ISPROPERTY ON CWPC_ITEMATTRIBUTE_V (ISPROPERTY ASC)
/

-- Initialize PLM data
insert into cwpl_plmstages (stage, label) values ('conception', 'Conception');
insert into cwpl_plmstages (stage, label) values ('evaluation', 'Evaluation');
insert into cwpl_plmstages (stage, label) values ('definition', 'Definition');
insert into cwpl_plmstages (stage, label) values ('build', 'Build');
insert into cwpl_plmstages (stage, label) values ('testing', 'Testing');
insert into cwpl_plmstages (stage, label) values ('launchProduct', 'Launch Product');

insert into cwpl_plmparticipants (participant, label) values ('businessAnalyst', 'Business Analyst');
insert into cwpl_plmparticipants (participant, label) values ('itNetworkAnalyst', 'IT Network Analyst');
insert into cwpl_plmparticipants (participant, label) values ('marketing', 'Marketing');
insert into cwpl_plmparticipants (participant, label) values ('networkOperations', 'Network Operations');
insert into cwpl_plmparticipants (participant, label) values ('pricingEconomics', 'Pricing Economics');
insert into cwpl_plmparticipants (participant, label) values ('productManager', 'Product Manager');
insert into cwpl_plmparticipants (participant, label) values ('productModeler', 'Product Modeler');
insert into cwpl_plmparticipants (participant, label) values ('revenueAssurance', 'Revenue Assurance');

Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('550005','DEF','upadmin',to_timestamp('2011-04-25 11:01:12','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:01:12','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','definition_setup',null,'cwt_pclm:definitionMicroFlow_setup',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('550006','DEF','upadmin',to_timestamp('2011-04-25 11:01:40','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:01:40','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','build_setup',null,'cwt_pclm:implementationMicroFlow_setup',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('550011','DEF','upadmin',to_timestamp('2011-04-25 11:05:39','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:05:39','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','launch_setup',null,'cwt_pclm:launchProductMicroFlow_setup',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('550003','DEF','upadmin',to_timestamp('2011-04-25 10:59:42','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 10:59:42','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','conception_setup',null,'cwt_pclm:conceptionMicroFlow_setup',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('550004','DEF','upadmin',to_timestamp('2011-04-25 11:00:34','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:00:34','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','evaluation_setup',null,'cwt_pclm:evaluationMicroFlow_setup',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('550010','DEF','upadmin',to_timestamp('2011-04-25 11:04:55','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:04:55','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','testing_setup',null,'cwt_pclm:testingMicroFlow_setup',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551000','DEF','upadmin',to_timestamp('2011-04-25 11:22:47','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:22:47','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_teardown',null,'cwt_pclm:definitionMicroFlow_teardown',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551001','DEF','upadmin',to_timestamp('2011-04-25 11:23:33','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:23:33','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','build_teardown',null,'cwt_pclm:implementationMicroFlow_teardown',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551002','DEF','upadmin',to_timestamp('2011-04-25 11:24:09','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:24:09','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','launch_teardown',null,'cwt_pclm:launchProductMicroFlow_teardown',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551003','DEF','upadmin',to_timestamp('2011-04-25 11:24:52','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:24:52','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','concep_teardown',null,'cwt_pclm:conceptionMicroFlow_teardown',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551004','DEF','upadmin',to_timestamp('2011-04-25 11:25:33','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:25:33','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eval_teardown',null,'cwt_pclm:evaluationMicroFlow_teardown',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551005','DEF','upadmin',to_timestamp('2011-04-25 11:26:44','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:26:44','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','testing_teardown',null,'cwt_pclm:testingMicroFlow_teardown',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551013','DEF','upadmin',to_timestamp('2011-04-25 11:33:54','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:33:54','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','ba_approval',null,'cwt_pclm:businessAnalystApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551014','DEF','upadmin',to_timestamp('2011-04-25 11:35:18','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:35:18','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','it_approval',null,'cwt_pclm:informationTechnologyApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551015','DEF','upadmin',to_timestamp('2011-04-25 11:35:57','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:35:57','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','ma_approval',null,'cwt_pclm:marketingApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551016','DEF','upadmin',to_timestamp('2011-04-25 11:36:35','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:36:35','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','no_approval',null,'cwt_pclm:networkOperationsApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551017','DEF','upadmin',to_timestamp('2011-04-25 11:37:02','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:37:02','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','pe_approval',null,'cwt_pclm:priceEconomicsApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551018','DEF','upadmin',to_timestamp('2011-04-25 11:37:38','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:37:38','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','pm_approval',null,'cwt_pclm:productManagerApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551019','DEF','upadmin',to_timestamp('2011-04-25 11:38:13','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:38:13','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','pr_approval',null,'cwt_pclm:productModelerApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551020','DEF','upadmin',to_timestamp('2011-04-25 11:38:51','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:38:51','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','ra_approval',null,'cwt_pclm:revenueAssuranceApprovalSubProcess',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('551021','DEF','upadmin',to_timestamp('2011-04-25 11:53:58','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:53:58','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','main',null,'cwt_pclm:mainProcess',null);

Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651013','DEF','upadmin',to_timestamp('2011-04-25 11:33:54','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:33:54','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','ba_action',null,'cwt_pclm:createCompleteBA',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651014','DEF','upadmin',to_timestamp('2011-04-25 11:35:18','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:35:18','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','it_action',null,'cwt_pclm:createCompleteIT',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651015','DEF','upadmin',to_timestamp('2011-04-25 11:35:57','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:35:57','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','ma_action',null,'cwt_pclm:createCompleteMarketing',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651016','DEF','upadmin',to_timestamp('2011-04-25 11:36:35','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:36:35','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','no_action',null,'cwt_pclm:createCompleteNetworkOperations',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651017','DEF','upadmin',to_timestamp('2011-04-25 11:37:02','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:37:02','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','pe_action',null,'cwt_pclm:createCompletePriceEconomics',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651018','DEF','upadmin',to_timestamp('2011-04-25 11:37:38','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:37:38','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','pm_action',null,'cwt_pclm:createCompleteProductManager',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651019','DEF','upadmin',to_timestamp('2011-04-25 11:38:13','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:38:13','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','pr_action',null,'cwt_pclm:createCompleteProductModeler',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('651020','DEF','upadmin',to_timestamp('2011-04-25 11:38:51','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:38:51','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','ra_action',null,'cwt_pclm:createCompleteRevenueAssurance',null);
Insert into CWT_MICROFLOW (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,CODE,DESCRIPTION,METADATANAME,PARAMETERS) values ('751020','DEF','upadmin',to_timestamp('2011-04-25 11:38:51','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 11:38:51','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','resetFlags',null,'cwt_pclm:resetFlags',null);

Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551038','DEF','upadmin',to_timestamp('2011-04-25 13:47:24','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:47:24','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_ma_approval',null,'551015','marketing','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('700003','DEF','upadmin',to_timestamp('2011-04-28 10:29:54','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-28 10:29:54','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','conception_setup',null,'550003','setup','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('700004','DEF','upadmin',to_timestamp('2011-04-28 10:31:12','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-28 10:31:12','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_ba_approval',null,'551013','businessAnalyst','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('711003','DEF','upadmin',to_timestamp('2011-04-28 18:29:29','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-28 18:29:29','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_it_approval',null,'551014','itNetworkAnalyst','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('805000','DEF','upadmin',to_timestamp('2011-05-02 12:02:18','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-02 12:02:18','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_setup',null,'550004','setup','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('805002','DEF','upadmin',to_timestamp('2011-05-02 12:03:32','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-02 12:03:32','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_ba_approval',null,'551013','businessAnalyst','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('805003','DEF','upadmin',to_timestamp('2011-05-02 12:03:54','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-02 12:03:54','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_it_approval',null,'551014','itNetworkAnalyst','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900003','DEF','upadmin',to_timestamp('2011-05-04 10:30:19','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:30:19','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_pe_approval',null,'551017','pricingEconomics','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900011','DEF','upadmin',to_timestamp('2011-05-04 10:34:54','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:34:54','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_ma_approval',null,'551015','marketing','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900013','DEF','upadmin',to_timestamp('2011-05-04 10:37:09','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:09','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_it_approval',null,'551014','itNetworkAnalyst','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900016','DEF','upadmin',to_timestamp('2011-05-04 10:37:56','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:56','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_pm_approval',null,'551018','productManager','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900017','DEF','upadmin',to_timestamp('2011-05-04 10:38:16','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:38:16','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_pe_approval',null,'551017','pricingEconomics','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900020','DEF','upadmin',to_timestamp('2011-05-04 10:40:14','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:40:14','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_ba_approval',null,'551013','businessAnalyst','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900022','DEF','upadmin',to_timestamp('2011-05-04 10:40:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:40:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_ra_approval',null,'551020','revenueAssurance','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900026','DEF','upadmin',to_timestamp('2011-05-04 10:41:51','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:51','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_no_approval',null,'551016','networkOperations','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900012','DEF','upadmin',to_timestamp('2011-05-04 10:36:18','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:36:18','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_ba_approval',null,'551013','businessAnalyst','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900015','DEF','upadmin',to_timestamp('2011-05-04 10:37:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_pr_approval',null,'551019','productModeler','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900019','DEF','upadmin',to_timestamp('2011-05-04 10:38:53','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:38:53','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_ma_approval',null,'551015','marketing','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900021','DEF','upadmin',to_timestamp('2011-05-04 10:40:30','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:40:30','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_it_approval',null,'551014','itNetworkAnalyst','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900023','DEF','upadmin',to_timestamp('2011-05-04 10:41:00','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:00','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_pr_approval',null,'551019','productModeler','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900030','DEF','upadmin',to_timestamp('2011-05-04 10:56:36','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:56:36','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_setup',null,'550010','setup','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900031','DEF','upadmin',to_timestamp('2011-05-04 10:56:50','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:56:50','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_teardown',null,'551005','teardown','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900001','DEF','upadmin',to_timestamp('2011-05-04 10:28:08','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:28:08','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_pm_approval',null,'551018','productManager','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900006','DEF','upadmin',to_timestamp('2011-05-04 10:32:52','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:32:52','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_ra_approval',null,'551020','revenueAssurance','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900008','DEF','upadmin',to_timestamp('2011-05-04 10:33:47','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:33:47','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_pr_approval',null,'551019','productModeler','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900024','DEF','upadmin',to_timestamp('2011-05-04 10:41:10','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:10','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_pm_approval',null,'551018','productManager','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551037','DEF','upadmin',to_timestamp('2011-04-25 13:46:37','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:46:37','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_it_approval',null,'551014','itNetworkAnalyst','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551040','DEF','upadmin',to_timestamp('2011-04-25 13:49:17','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:49:17','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_pe_approval',null,'551017','pricingEconomics','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551041','DEF','upadmin',to_timestamp('2011-04-25 13:49:51','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:49:51','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_pm_approval',null,'551018','productManager','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551043','DEF','upadmin',to_timestamp('2011-04-25 13:52:25','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:52:25','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_ra_approval',null,'551020','revenueAssurance','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900007','DEF','upadmin',to_timestamp('2011-05-04 10:33:16','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:33:16','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_pm_approval',null,'551018','productManager','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900002','DEF','upadmin',to_timestamp('2011-05-04 10:29:53','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:29:53','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_pr_approval',null,'551019','productModeler','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900005','DEF','upadmin',to_timestamp('2011-05-04 10:31:22','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:31:22','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_ma_approval',null,'551015','marketing','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900009','DEF','upadmin',to_timestamp('2011-05-04 10:34:05','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:34:05','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_pe_approval',null,'551017','pricingEconomics','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900010','DEF','upadmin',to_timestamp('2011-05-04 10:34:25','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:34:25','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_no_approval',null,'551016','networkOperations','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900014','DEF','upadmin',to_timestamp('2011-05-04 10:37:28','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:28','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_ra_approval',null,'551020','revenueAssurance','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900018','DEF','upadmin',to_timestamp('2011-05-04 10:38:36','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:38:36','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_no_approval',null,'551016','networkOperations','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900027','DEF','upadmin',to_timestamp('2011-05-04 10:42:07','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:42:07','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_ma_approval',null,'551015','marketing','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551022','DEF','upadmin',to_timestamp('2011-04-25 12:03:33','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:03:33','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','definition_setup',null,'550005','setup','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551023','DEF','upadmin',to_timestamp('2011-04-25 12:07:14','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:07:14','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_ba_approval',null,'551013','businessAnalyst','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551024','DEF','upadmin',to_timestamp('2011-04-25 12:07:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:07:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_it_approval',null,'551014','itNetworkAnalyst','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551025','DEF','upadmin',to_timestamp('2011-04-25 12:08:05','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:08:22','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_ma_approval',null,'551015','marketing','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551026','DEF','upadmin',to_timestamp('2011-04-25 12:09:12','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:09:12','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_no_approval',null,'551016','networkOperations','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551027','DEF','upadmin',to_timestamp('2011-04-25 12:09:39','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:09:39','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_pe_approval',null,'551017','pricingEconomics','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551028','DEF','upadmin',to_timestamp('2011-04-25 12:10:02','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:10:02','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_pm_approval',null,'551018','productManager','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551029','DEF','upadmin',to_timestamp('2011-04-25 12:10:29','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:10:29','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_pr_approval',null,'551019','productModeler','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551030','DEF','upadmin',to_timestamp('2011-04-25 12:11:04','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:11:04','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_ra_approval',null,'551020','revenueAssurance','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551031','DEF','upadmin',to_timestamp('2011-04-25 12:12:40','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:12:40','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_teardown',null,'551000','teardown','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551032','DEF','upadmin',to_timestamp('2011-04-25 12:13:28','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:13:28','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','build_setup',null,'550006','setup','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551036','DEF','upadmin',to_timestamp('2011-04-25 12:19:48','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:19:48','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_ba_approval',null,'551013','businessAnalyst','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551039','DEF','upadmin',to_timestamp('2011-04-25 13:48:42','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:48:42','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_no_approval',null,'551016','networkOperations','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551042','DEF','upadmin',to_timestamp('2011-04-25 13:51:01','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:51:01','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_pr_approval',null,'551019','productModeler','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551044','DEF','upadmin',to_timestamp('2011-04-25 13:54:25','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:54:25','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_teardown',null,'551001','teardown','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('551053','DEF','upadmin',to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','main',null,'551021','main','main',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('700005','DEF','upadmin',to_timestamp('2011-04-28 11:09:41','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-28 11:09:41','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_teardown',null,'551003','teardown','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('805001','DEF','upadmin',to_timestamp('2011-05-02 12:02:59','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-02 12:02:59','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_teardown',null,'551004','teardown','evaluation',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900000','DEF','upadmin',to_timestamp('2011-05-04 10:27:31','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:27:31','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_ra_approval',null,'551020','revenueAssurance','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900004','DEF','upadmin',to_timestamp('2011-05-04 10:30:52','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:30:52','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_no_approval',null,'551016','networkOperations','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900025','DEF','upadmin',to_timestamp('2011-05-04 10:41:27','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:27','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_pe_approval',null,'551017','pricingEconomics','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900028','DEF','upadmin',to_timestamp('2011-05-04 10:53:29','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:53:29','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_setup',null,'550011','setup','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('900029','DEF','upadmin',to_timestamp('2011-05-04 10:53:56','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:53:56','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_teardown',null,'551002','teardown','launchProduct',0);

Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651038','DEF','upadmin',to_timestamp('2011-04-25 13:47:24','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:47:24','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_ma_action',null,'651015','marketing','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('800004','DEF','upadmin',to_timestamp('2011-04-28 10:31:12','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-28 10:31:12','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_ba_action',null,'651013','businessAnalyst','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('811003','DEF','upadmin',to_timestamp('2011-04-28 18:29:29','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-28 18:29:29','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_it_action',null,'651014','itNetworkAnalyst','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('905002','DEF','upadmin',to_timestamp('2011-05-02 12:03:32','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-02 12:03:32','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_ba_action',null,'651013','businessAnalyst','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('905003','DEF','upadmin',to_timestamp('2011-05-02 12:03:54','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-02 12:03:54','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_it_action',null,'651014','itNetworkAnalyst','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990003','DEF','upadmin',to_timestamp('2011-05-04 10:30:19','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:30:19','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_pe_action',null,'651017','pricingEconomics','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990011','DEF','upadmin',to_timestamp('2011-05-04 10:34:54','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:34:54','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_ma_action',null,'651015','marketing','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990013','DEF','upadmin',to_timestamp('2011-05-04 10:37:09','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:09','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_it_action',null,'651014','itNetworkAnalyst','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990016','DEF','upadmin',to_timestamp('2011-05-04 10:37:56','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:56','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_pm_action',null,'651018','productManager','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990017','DEF','upadmin',to_timestamp('2011-05-04 10:38:16','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:38:16','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_pe_action',null,'651017','pricingEconomics','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990020','DEF','upadmin',to_timestamp('2011-05-04 10:40:14','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:40:14','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_ba_action',null,'651013','businessAnalyst','launchProduct',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990022','DEF','upadmin',to_timestamp('2011-05-04 10:40:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:40:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_ra_action',null,'651020','revenueAssurance','launchProduct',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990026','DEF','upadmin',to_timestamp('2011-05-04 10:41:51','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:51','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_no_action',null,'651016','networkOperations','launchProduct',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990012','DEF','upadmin',to_timestamp('2011-05-04 10:36:18','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:36:18','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_ba_action',null,'651013','businessAnalyst','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990015','DEF','upadmin',to_timestamp('2011-05-04 10:37:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_pr_action',null,'651019','productModeler','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990019','DEF','upadmin',to_timestamp('2011-05-04 10:38:53','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:38:53','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_ma_action',null,'651015','marketing','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990021','DEF','upadmin',to_timestamp('2011-05-04 10:40:30','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:40:30','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_it_action',null,'651014','itNetworkAnalyst','launchProduct',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990023','DEF','upadmin',to_timestamp('2011-05-04 10:41:00','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:00','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_pr_action',null,'651019','productModeler','launchProduct',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990001','DEF','upadmin',to_timestamp('2011-05-04 10:28:08','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:28:08','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_pm_action',null,'651018','productManager','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990006','DEF','upadmin',to_timestamp('2011-05-04 10:32:52','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:32:52','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_ra_action',null,'651020','revenueAssurance','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990008','DEF','upadmin',to_timestamp('2011-05-04 10:33:47','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:33:47','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_pr_action',null,'651019','productModeler','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990024','DEF','upadmin',to_timestamp('2011-05-04 10:41:10','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:10','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_pm_action',null,'651018','productManager','launchProduct',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651037','DEF','upadmin',to_timestamp('2011-04-25 13:46:37','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:46:37','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_it_action',null,'651014','itNetworkAnalyst','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651040','DEF','upadmin',to_timestamp('2011-04-25 13:49:17','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:49:17','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_pe_action',null,'651017','pricingEconomics','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651041','DEF','upadmin',to_timestamp('2011-04-25 13:49:51','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:49:51','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_pm_action',null,'651018','productManager','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651043','DEF','upadmin',to_timestamp('2011-04-25 13:52:25','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:52:25','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_ra_action',null,'651020','revenueAssurance','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990007','DEF','upadmin',to_timestamp('2011-05-04 10:33:16','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:33:16','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_pm_action',null,'651018','productManager','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990002','DEF','upadmin',to_timestamp('2011-05-04 10:29:53','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:29:53','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_pr_action',null,'651019','productModeler','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990005','DEF','upadmin',to_timestamp('2011-05-04 10:31:22','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:31:22','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_ma_action',null,'651015','marketing','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990009','DEF','upadmin',to_timestamp('2011-05-04 10:34:05','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:34:05','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_pe_action',null,'651017','pricingEconomics','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990010','DEF','upadmin',to_timestamp('2011-05-04 10:34:25','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:34:25','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','eva_no_action',null,'651016','networkOperations','evaluation',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990014','DEF','upadmin',to_timestamp('2011-05-04 10:37:28','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:37:28','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_ra_action',null,'651020','revenueAssurance','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990018','DEF','upadmin',to_timestamp('2011-05-04 10:38:36','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:38:36','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','test_no_action',null,'651016','networkOperations','testing',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990027','DEF','upadmin',to_timestamp('2011-05-04 10:42:07','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:42:07','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_ma_action',null,'651015','marketing','launchProduct',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651023','DEF','upadmin',to_timestamp('2011-04-25 12:07:14','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:07:14','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_ba_action',null,'651013','businessAnalyst','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651024','DEF','upadmin',to_timestamp('2011-04-25 12:07:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:07:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_it_action',null,'651014','itNetworkAnalyst','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651025','DEF','upadmin',to_timestamp('2011-04-25 12:08:05','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:08:22','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_ma_action',null,'651015','marketing','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651026','DEF','upadmin',to_timestamp('2011-04-25 12:09:12','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:09:12','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_no_action',null,'651016','networkOperations','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651027','DEF','upadmin',to_timestamp('2011-04-25 12:09:39','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:09:39','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_pe_action',null,'651017','pricingEconomics','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651028','DEF','upadmin',to_timestamp('2011-04-25 12:10:02','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:10:02','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_pm_action',null,'651018','productManager','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651029','DEF','upadmin',to_timestamp('2011-04-25 12:10:29','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:10:29','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_pr_action',null,'651019','productModeler','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651030','DEF','upadmin',to_timestamp('2011-04-25 12:11:04','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:11:04','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','def_ra_action',null,'651020','revenueAssurance','definition',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651036','DEF','upadmin',to_timestamp('2011-04-25 12:19:48','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 12:19:48','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_ba_action',null,'651013','businessAnalyst','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651039','DEF','upadmin',to_timestamp('2011-04-25 13:48:42','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:48:42','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_no_action',null,'651016','networkOperations','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('651042','DEF','upadmin',to_timestamp('2011-04-25 13:51:01','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 13:51:01','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','bui_pr_action',null,'651019','productModeler','build',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990000','DEF','upadmin',to_timestamp('2011-05-04 10:27:31','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:27:31','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_ra_action',null,'651020','revenueAssurance','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990004','DEF','upadmin',to_timestamp('2011-05-04 10:30:52','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:30:52','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','con_no_action',null,'651016','networkOperations','conception',1);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('990025','DEF','upadmin',to_timestamp('2011-05-04 10:41:27','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-05-04 10:41:27','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','laun_pe_action',null,'651017','pricingEconomics','launchProduct',1);

Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('951053','DEF','upadmin',to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','intermediate',null,'751020','intermediate','launchProduct',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('961053','DEF','upadmin',to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','intermediate',null,'751020','intermediate','conception',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('971053','DEF','upadmin',to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','intermediate',null,'751020','intermediate','build',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('981053','DEF','upadmin',to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','intermediate',null,'751020','intermediate','definition',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('991053','DEF','upadmin',to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','intermediate',null,'751020','intermediate','testing',0);
Insert into CWT_TAS (ID,STATE,CWCREATEDBY,CWCREATED,LASTUPDATEDDATE,LASTUPDATEDBY,NAME,PARAMETERS,MICROFLOWREF,PARTICIPANTS,TASKSTAGE,ACTION) values ('941053','DEF','upadmin',to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),to_timestamp('2011-04-25 15:18:45','YYYY-MM-DD HH24:MI:SSXFF'),'upadmin','intermediate',null,'751020','intermediate','evaluation',0);

-- Catalog Hierarchy Enhancement

SET SERVEROUTPUT ON SIZE 1000000;

CREATE TABLE BKUP_CWPC_ITEM AS
SELECT * FROM CWPC_ITEM;
CREATE TABLE BKUP_CWPC_ITEMRELATION_V AS
SELECT * FROM CWPC_ITEMRELATION_V;
CREATE TABLE BKUP_CWPC_ITEMRULE_V AS
SELECT * FROM CWPC_ITEMRULE_V;

ALTER TABLE CWPC_ITEM MODIFY (ITEMTYPE VARCHAR2(32 BYTE) );

INSERT
INTO CWPC_ASSOCIATIONTYPE
  (
    ASSOCIATIONTYPECODE,
    NAME,
    LABEL,
    STATUS,
    CATEGORY,
    RULETYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'CwTreeNodeLink',
    'CwTreeNodeLink',
    INSERT_TRANSTXT('CwTreeNodeLink'),
    'ACT',
    'Item',
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    DBMS_RANDOM.STRING('A', 5)
  );

INSERT
INTO CWPC_ASSOCIATIONTYPE
  (
    ASSOCIATIONTYPECODE,
    NAME,
    LABEL,
    STATUS,
    CATEGORY,
    RULETYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'CwTreeItemLink',
    'CwTreeItemLink',
    INSERT_TRANSTXT('CwTreeItemLink'),
    'ACT',
    'Item',
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    DBMS_RANDOM.STRING('A', 5)
  );
  
INSERT
INTO CWPC_ASSOCIATIONTYPE
  (
    ASSOCIATIONTYPECODE,
    NAME,
    LABEL,
    STATUS,
    CATEGORY,
    RULETYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'CwTreeNodeEligibility',
    'CwTreeNodeEligibility',
    INSERT_TRANSTXT('CwTreeNodeEligibility'),
    'ACT',
    'Rule',
    'C',
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    DBMS_RANDOM.STRING('A', 5)
  );

INSERT
INTO CWPC_ASSOCIATIONTYPE
  (
    ASSOCIATIONTYPECODE,
    NAME,
    LABEL,
    STATUS,
    CATEGORY,
    RULETYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'CwAvailabilityItemLink',
    'CwAvailabilityItemLink',
    INSERT_TRANSTXT('CwAvailabilityItemLink'),
    'ACT',
    'Item',
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    DBMS_RANDOM.STRING('A', 5)
  );
INSERT
INTO CWPC_ASSOCIATIONTYPE
  (
    ASSOCIATIONTYPECODE,
    NAME,
    LABEL,
    STATUS,
    CATEGORY,
    RULETYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'CwAvailabilityNodeLink',
    'CwAvailabilityNodeLink',
    INSERT_TRANSTXT('CwAvailabilityNodeLink'),
    'ACT',
    'Item',
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    DBMS_RANDOM.STRING('A', 5)
  );
INSERT
INTO CWPC_ASSOCIATIONTYPE
  (
    ASSOCIATIONTYPECODE,
    NAME,
    LABEL,
    STATUS,
    CATEGORY,
    RULETYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'CwAvailabilityItemInclude',
    'CwAvailabilityItemInclude',
    INSERT_TRANSTXT('CwAvailabilityItemInclude'),
    'ACT',
    'Item',
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    DBMS_RANDOM.STRING('A', 5)
  );
INSERT
INTO CWPC_ASSOCIATIONTYPE
  (
    ASSOCIATIONTYPECODE,
    NAME,
    LABEL,
    STATUS,
    CATEGORY,
    RULETYPE,
    OWNERID,
    UPDATEDBY,
    LASTUPDATEDDATE,
    CWCREATEDBY,
    CWCREATED,
    CWDOCSTAMP
  )
  VALUES
  (
    'CwAvailabilityItemExclude',
    'CwAvailabilityItemExclude',
    INSERT_TRANSTXT('CwAvailabilityItemExclude'),
    'ACT',
    'Item',
    NULL,
    NULL,
    'upadmin',
    sysdate,
    'upadmin',
    sysdate,
    DBMS_RANDOM.STRING('A', 5)
  );

DECLARE
  CURSOR chr
  IS
    SELECT * FROM CWPC_CATALOGHIERARCHY;
  CURSOR chr2
  IS
    SELECT * FROM CWPC_CATALOGHIERARCHY;
  DEFAULT_CATALOG_CODE_LENGTH NUMBER := 32;
  tmp_itype                   VARCHAR2(32726);
  tmp_icode                   VARCHAR2(32726);
  tmp_iname CWPC_ITEM.NAME%TYPE;
  tmp_ilabel CWPC_ITEM.LABEL%TYPE;
  tmp_desc CWPC_ITEM.DESCRIPTION%TYPE;
  tmp_sdate CWPC_ITEM.STARTDATE%TYPE;
  tmp_edate CWPC_ITEM.ENDDATE%TYPE;
  tmp_status CWPC_ITEM.STATUS%TYPE;
  tmp_orderable CWPC_ITEM.ORDERABLE%TYPE;
  tmp_ownerid CWPC_ITEM.OWNERID%TYPE;
  tmp_updatedby CWPC_ITEM.UPDATEDBY%TYPE;
  tmp_ludate CWPC_ITEM.LASTUPDATEDDATE%TYPE;
  tmp_createdby CWPC_ITEM.CWCREATEDBY%TYPE;
  tmp_lcdate CWPC_ITEM.CWCREATED%TYPE;
  tmp_docstamp CWPC_ITEM.CWDOCSTAMP%TYPE;
  tmp_type CWPC_ITEM.TYPE%TYPE;
  tmp_assocType CWPC_ITEMRELATION_V.ASSOCIATIONTYPE%TYPE;
  tmp_parent_code CWPC_ITEMRELATION_V.ITEMCODE%TYPE;
  tmp_item_code VARCHAR2(32726);
  tmp_target_item_code CWPC_ITEMRELATION_V.ITEMRELATIONTARGET%TYPE;
  tmp_relation_code VARCHAR2(32726);
  tmp_relation_versionid CWPC_ITEMRELATION_V.ITEMRELATIONVERSIONID%TYPE;
  tmp_cnt Number(8);
  CURSOR ihchy
  IS
    SELECT * FROM CWPC_ITEMHIERARCHY;
  CURSOR irule
  IS
    SELECT * FROM CWPC_ITEMRULE_V WHERE CATALOGOBJECTTYPE='CatalogHierarchy';
TYPE sequence_type
IS
  TABLE OF CWPC_ITEMRELATION_V.SEQUENCE%TYPE INDEX BY CWPC_ITEMRELATION_V.ITEMCODE%TYPE;
  tmp_sequence_storage sequence_type;
  tmp_sequence CWPC_ITEMRELATION_V.SEQUENCE%TYPE;
  tmp_sequence_ih_storage sequence_type;
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE CWPC_ITEM DISABLE ALL TRIGGERS';
  EXECUTE IMMEDIATE 'ALTER TABLE CWPC_ITEMRELATION_V DISABLE ALL TRIGGERS';
  EXECUTE IMMEDIATE 'ALTER TABLE CWPC_ITEMRULE_V DISABLE ALL TRIGGERS';
  FOR tmp_chr IN chr
  LOOP
    tmp_parent_code    := tmp_chr.PARENTHIERARCHYCODE;
    IF tmp_parent_code IS NULL THEN
      tmp_itype        := 'CwTreeTop';
    ELSE
      tmp_itype := 'CwTreeNode';
    END IF;
    IF tmp_chr.STARTDATE IS NULL THEN
      tmp_sdate          := sysdate;
    ELSE
      tmp_sdate := tmp_chr.STARTDATE;
    END IF;
    tmp_icode     := tmp_chr.HIERARCHYCODE;
    tmp_iname     := tmp_chr.NAME;
	IF tmp_chr.LABEL IS NULL THEN
		tmp_ilabel    := tmp_chr.LABEL;
	ELSE
		tmp_ilabel    := INSERT_TRANSTXT(tmp_chr.LABEL);
	END IF;
	
    tmp_desc      := tmp_chr.DESCRIPTION;
    tmp_edate     := tmp_chr.ENDDATE;
    tmp_status    := tmp_chr.STATUS;
    tmp_orderable := NULL;
    tmp_ownerid   := tmp_chr.OWNERID;
    tmp_updatedby := tmp_chr.UPDATEDBY;
    tmp_ludate    := tmp_chr.LASTUPDATEDDATE;
    tmp_createdby := tmp_chr.CWCREATEDBY;
    tmp_lcdate    := tmp_chr.CWCREATED;
    tmp_docstamp  := tmp_chr.CWDOCSTAMP;
    tmp_type      := NULL;
    INSERT
    INTO CWPC_ITEM
      (
        ITEMCODE,
        BASEITEMCODE,
        ITEMTYPE,
        NAME,
        LABEL,
        DESCRIPTION,
        STARTDATE,
        ENDDATE,
        STATUS,
        ORDERABLE,
        OWNERID,
        UPDATEDBY,
        LASTUPDATEDDATE,
        CWCREATEDBY,
        CWCREATED,
        CWDOCSTAMP,
        TYPE
      )
      VALUES
      (
        tmp_icode,
        NULL,
        tmp_itype,
        tmp_iname,
        tmp_ilabel,
        tmp_desc,
        tmp_sdate,
        tmp_edate,
        tmp_status,
        tmp_orderable,
        tmp_ownerid,
        tmp_updatedby,
        tmp_ludate,
        tmp_createdby,
        tmp_lcdate,
        tmp_docstamp,
        tmp_type
      );
  END LOOP;
  EXECUTE IMMEDIATE 'ALTER TABLE CWPC_ITEM ENABLE ALL TRIGGERS';
  DBMS_OUTPUT.PUT_LINE
  (
    'CWPC_CATALOGHIERARCHY HAS BEEN MIGRATED TO CWPC_ITEM and CWPC_ITEMRELATION_V'
  )
  ;
  COMMIT;
  tmp_cnt := 0;
  FOR tmp_chr IN chr2
  LOOP
    tmp_parent_code    := tmp_chr.PARENTHIERARCHYCODE;
    IF tmp_chr.STARTDATE IS NULL THEN
      tmp_sdate          := sysdate;
    ELSE
      tmp_sdate := tmp_chr.STARTDATE;
    END IF;
    tmp_icode			   := tmp_chr.HIERARCHYCODE;
    tmp_iname              := tmp_chr.NAME;
	IF tmp_chr.LABEL IS NULL THEN
		tmp_ilabel             := tmp_chr.LABEL;
	ELSE
		tmp_ilabel 			   := INSERT_TRANSTXT(tmp_chr.LABEL);
	END IF;
    tmp_edate              := tmp_chr.ENDDATE;
    tmp_status             := tmp_chr.STATUS;
    tmp_ownerid            := tmp_chr.OWNERID;
    tmp_updatedby          := tmp_chr.UPDATEDBY;
    tmp_ludate             := tmp_chr.LASTUPDATEDDATE;
    tmp_createdby          := tmp_chr.CWCREATEDBY;
    tmp_lcdate             := tmp_chr.CWCREATED;
    tmp_docstamp           := tmp_chr.CWDOCSTAMP;
    IF NOT tmp_parent_code IS NULL THEN
      tmp_item_code        := tmp_parent_code;
      tmp_relation_code := SUBSTR
      (
        tmp_cnt || tmp_item_code || tmp_icode, 0, DEFAULT_CATALOG_CODE_LENGTH
      )
      ;
	  tmp_cnt := tmp_cnt + 1;
      --tmp_relation_versionid := CWDOCSEQ.nextval;
      tmp_assoctype          := 'CwTreeNodeLink';
      IF tmp_sequence_storage.exists
        (
          tmp_item_code
        )
        THEN
        tmp_sequence_storage
        (
          tmp_item_code
        )
        := tmp_sequence_storage
        (
          tmp_item_code
        )
        + 1;
      ELSE
        tmp_sequence_storage
        (
          tmp_item_code
        )
        := 1;
      END IF;
      tmp_sequence := tmp_sequence_storage
      (
        tmp_item_code
      )
      ;
      INSERT
      INTO CWPC_ITEMRELATION_V
        (
          ITEMRELATIONVERSIONID,
          ITEMRELATIONTARGET,
          ASSOCIATIONTYPE,
          ITEMCODE,
          ITEMRELATIONCODE,
          STATUS,
          NAME,
          LABEL,
          SEQUENCE,
          MIN_QUANTITY,
          MAX_QUANTITY,
          STARTDATE,
          ENDDATE,
          CANCEL,
          OWNERID,
          UPDATEDBY,
          LASTUPDATEDDATE,
          CWCREATEDBY,
          CWCREATED,
          CWDOCSTAMP
        )
        VALUES
        (
          --tmp_relation_versionid,
		  CWDOCSEQ.nextval,
          tmp_icode,
          tmp_assoctype,
          tmp_item_code,
          tmp_relation_code,
          tmp_status,
          tmp_iname,
          tmp_ilabel,
          tmp_sequence,
          0,
          1000,
          tmp_sdate,
          tmp_edate,
          NULL,
          tmp_ownerid,
          tmp_updatedby,
          tmp_ludate,
          tmp_createdby,
          tmp_lcdate,
          tmp_docstamp
        );
    END IF;
  END LOOP;
    DBMS_OUTPUT.PUT_LINE
  (
    'CWPC_CATALOGHIERARCHY HAS BEEN MIGRATED TO CWPC_ITEMRELATION_V'
  )
  ;
  COMMIT;
  
  FOR tmp_ihchy IN ihchy
  LOOP
    tmp_item_code := tmp_ihchy.HIERARCHYCODE;
    tmp_target_item_code   := tmp_ihchy.ITEMCODE;
    tmp_relation_code      := tmp_ihchy.ITEMHIERARCHYID;
    --tmp_relation_versionid := CWDOCSEQ.nextval;
    tmp_assoctype          := 'CwTreeItemLink';
    tmp_status             := tmp_ihchy.STATUS;
    IF tmp_ihchy.STARTDATE IS NULL THEN
      tmp_sdate          := sysdate;
    ELSE
      tmp_sdate := tmp_ihchy.STARTDATE;
    END IF;
    tmp_edate              := tmp_ihchy.ENDDATE;
    tmp_ownerid            := tmp_ihchy.OWNERID;
    tmp_updatedby          := tmp_ihchy.UPDATEDBY;
    tmp_ludate             := tmp_ihchy.LASTUPDATEDDATE;
    tmp_createdby          := tmp_ihchy.CWCREATEDBY;
    tmp_lcdate             := tmp_ihchy.CWCREATED;
    tmp_docstamp           := tmp_ihchy.CWDOCSTAMP;

    INSERT
    INTO CWPC_ITEMRELATION_V
      (
        ITEMRELATIONVERSIONID,
        ITEMRELATIONTARGET,
        ASSOCIATIONTYPE,
        ITEMCODE,
        ITEMRELATIONCODE,
        STATUS,
        NAME,
        LABEL,
        SEQUENCE,
        MIN_QUANTITY,
        MAX_QUANTITY,
        STARTDATE,
        ENDDATE,
        CANCEL,
        OWNERID,
        UPDATEDBY,
        LASTUPDATEDDATE,
        CWCREATEDBY,
        CWCREATED,
        CWDOCSTAMP
      )
      VALUES
      (
        --tmp_relation_versionid,
		CWDOCSEQ.nextval,
        tmp_target_item_code,
        tmp_assoctype,
        tmp_item_code,
        tmp_relation_code,
        tmp_status,
        tmp_relation_code,
        INSERT_TRANSTXT(tmp_relation_code),
        0,
        0,
        1000,
        tmp_sdate,
        tmp_edate,
        NULL,
        tmp_ownerid,
        tmp_updatedby,
        tmp_ludate,
        tmp_createdby,
        tmp_lcdate,
        tmp_docstamp
      );
  END LOOP;
  DBMS_OUTPUT.PUT_LINE
  (
    'CWPC_ITEMHIERARCHY HAS BEEN MIGRATED TO CWPC_ITEMRELATION_V'
  );
  EXECUTE IMMEDIATE 'ALTER TABLE CWPC_ITEMRELATION_V ENABLE ALL TRIGGERS';

  FOR tmp_irule IN irule
  LOOP
    tmp_icode := tmp_irule.ITEMCODE;
    UPDATE CWPC_ITEMRULE_V
    SET CATALOGOBJECTTYPE= 'Item',
      itemcode           = tmp_icode,
      rule_type_business = 'CwTreeNodeEligibility'
    WHERE itemcode       = tmp_icode;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('CWPC_ITEMRULE_V HAS BEEN UPDATED WITH NEW ASSOCIATION TYPE');
  EXECUTE IMMEDIATE 'ALTER TABLE CWPC_ITEMRULE_V ENABLE ALL TRIGGERS';
  COMMIT;
END;
/
SET SERVEROUTPUT OFF;


-- Support External Charge Type
alter table CWPC_CHARGETYPE_V drop(EXTERNAL);
alter table CWPC_CHARGETYPE_V add(EXTERNAL NUMBER(1) default 0);


-- Support Charge Type Descriptions
ALTER TABLE CWPC_ITEMLABEL_V DROP CONSTRAINT ITEMDESCRIPTION;

INSERT INTO CWPC_ASSOCIATIONTYPE(ASSOCIATIONTYPECODE, NAME, LABEL, STATUS, CATEGORY, RULETYPE, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED,CWDOCSTAMP) VALUES('defChargeTypeDesc', 'DefChargeTypeDesc', INSERT_TRANSTXT('DefChargeTypeDesc'), 'ACT', 'ChargeTypeDesc', 'P', null, 'upadmin', sysdate, 'upadmin', sysdate, DBMS_RANDOM.STRING('A', 5));

CREATE OR REPLACE PROCEDURE CWPC_CREATE_CHARGETYPE_DESCS
AS
  chargetypedesc VARCHAR2(10) := NULL;
  itemLabelId    VARCHAR2(32) := NULL;
  CURSOR cur_chargetype_v
  IS
    SELECT * FROM CWPC_CHARGETYPE_V WHERE description IS NOT NULL;
  CURSOR cur_pc (ctid VARCHAR2)
  IS
    SELECT * FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTID = ctid;
BEGIN
  DELETE FROM cwpc_itemlabel_v WHERE category='defChargeTypeDesc';
  FOR cur IN cur_chargetype_v
  LOOP
    IF LENGTH ( cur.description ) <= 10 THEN
      chargetypedesc              := cur.description;
      SELECT CWDOCSEQ.NEXTVAL INTO itemLabelId FROM DUAL;
      INSERT
      INTO CWPC_ITEMLABEL_V
        (
          ITEMCODE ,
          ITEMLABELCODE ,
          LABEL ,
          STATUS ,
          OWNERID ,
          LASTUPDATEDDATE ,
          UPDATEDBY ,
          CWDOCSTAMP ,
          ITEMLABELID , -- Not match
          CATEGORY ,
          STARTDATE ,
          ENDDATE ,
          CANCEL ,
          CWCREATEDBY ,
          CWCREATED
        )
        VALUES
        (
          cur.chargetypeversionid ,
          cur.chargetypecode
          || '_desc',
          chargetypedesc ,
          cur.STATUS ,
          cur.OWNERID ,
          cur.LASTUPDATEDDATE ,
          cur.UPDATEDBY ,
          cur.CWDOCSTAMP ,
          itemLabelId,
          'defChargeTypeDesc',
          NVL(cur.STARTDATE, TO_DATE('01-01-1998', 'MM-DD-YYYY')),
          cur.ENDDATE ,
          NULL ,
          cur.CWCREATEDBY ,
          cur.CWCREATED
        );
      FOR tmpCurPC IN cur_pc
      (
        cur.chargetypeversionid
      )
      LOOP
        INSERT
        INTO CWPC_PROJECTCOMMAND
          (
            PROJECTASSIGNMENTID,
            CATALOGOBJECTID,
            CATALOGOBJECTCODE,
            OBJECTTYPE,
            ENDDATE,
            OWNERID,
            UPDATEDBY,
            LASTUPDATEDDATE,
            CWCREATEDBY,
            CWCREATED,
            CWDOCSTAMP,
            PROJECTID
          )
          VALUES
          (
            CWDOCSEQ.NEXTVAL,
            itemLabelId,
            cur.chargetypeversionid,
            'cwt_pc:cwt_itemDescription',
            NULL,
            cur.OWNERID,
            cur.UPDATEDBY,
            cur.LASTUPDATEDDATE,
            cur.CWCREATEDBY,
            cur.CWCREATED,
            tmpCurPC.CWDOCSTAMP,
            tmpCurPC.PROJECTID
          );
      END LOOP;
    END IF;
  END LOOP;
END;
/
EXECUTE CWPC_CREATE_CHARGETYPE_DESCS();
/

--Using java stored procedure to delete .dmp and .log files for DB import/export

--DBA should first grand file system delete permission to database user
--exec dbms_java.grant_permission( 'USER_SCHEMA', 'SYS:java.io.FilePermission', '<<ALL FILES>>', 'read, write, execute, delete' );
--GRANT JAVAUSERPRIV TO USER_SCHEMA;

CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "FileHandler" AS
import java.io.File;
public class FileHandler
{
  private static String SUCCESS = "1";

  
  /**
   * Checks if a directory exists and if it is empty
   * @param directoryName
   * @return "-1" if the directory doesn't exist. Otherwise, the number of files/sub-folders
   */
  public static String checkDirectoryOnDBServer(String directoryName) {
    try {
      if (directoryName==null) return "-1";
      
      File[] listOfFiles = new File(directoryName).listFiles();
  
      return listOfFiles == null ? "-1" : String.valueOf(listOfFiles.length);
    } catch (Exception ex) {
      return ex.toString();
    }
  }

  /**
   * Moves a file on the database server for backup purposes
   * @param conn The connection
   * @param directory The directory containing the file
   * @param fileName  The filename without path (e.g. MyFile.txt)
   * @param backupDirectory The backup directory, which is a sub-folder of
   * the directory containing the file. Will be created if not existed.
   * @return "1" = successful or exception
   */
  public static String moveAFileOnDBServer(String directory, String fileName, String backupDirectory) {
    try {
      File file = new File(directory, fileName);
      File targetDir = new File(directory, backupDirectory);
      if (!targetDir.exists())
        targetDir.mkdir();
      file.renameTo(new File(targetDir, fileName));
      return SUCCESS;
    }
    catch (Exception ex) {
      return ex.toString();
    }
  }
  
  /**
   * Deleles files on the database server - filename can be specified as 
   * exact file name, prefix or ending 
   * @param conn The connection
   * @param directory The directory containing the files
   * @param fileNamePattern The file pattern
   * @param fileNamePatternType 
   * <li> "N": fileNamePattern contains the exact file name
   * <li> "P": fileNamePattern contains the file prefix
   * <li> "S": fileNamePattern contains the file suffix 
   * @param fileExtension The file extension, with . (e.g. ".log") 
   * @return "1" = successful or exception
   */

  public static String deleteFilesOnDBServer(String directory, String fileNamePattern, String fileNamePatternType, String fileExtension) {
      try{
        File folder = new File(directory);
        File[] listOfFiles = folder.listFiles();
        for (int i = 0; i < listOfFiles.length; i++) {
          File sourceFile = listOfFiles[i];
          if (sourceFile.isFile()) {
            String fileName = sourceFile.getName();
            if (!fileName.endsWith(fileExtension)) continue;
            if ("N".equals(fileNamePatternType)) {       // Exact name match
              if (fileName.equals(fileNamePattern+fileExtension)) 
                sourceFile.delete();
            } 
            else if ("P".equals(fileNamePatternType)) {  // Prefix match 
              if (fileName.startsWith(fileNamePattern))
                sourceFile.delete();
            } 
            else if ("S".equals(fileNamePatternType)) {  // Suffix match
              if (fileName.endsWith(fileNamePattern+fileExtension))
                sourceFile.delete();
            }
          }
        }
        return SUCCESS;
        } catch(Exception ex) {
            return ex.toString();
        }
  }
  
    
};
/


CREATE OR REPLACE PACKAGE File_API AS

FUNCTION checkDirectoryOnDBServer (directory in VARCHAR2) RETURN VARCHAR2
AS LANGUAGE JAVA 
NAME 'FileHandler.checkDirectoryOnDBServer(java.lang.String) return java.lang.String';

FUNCTION moveAFileOnDBServer (directory in VARCHAR2, fileName in VARCHAR2, backupDirectory in VARCHAR2) RETURN VARCHAR2
AS LANGUAGE JAVA 
NAME 'FileHandler.moveAFileOnDBServer(java.lang.String, java.lang.String, java.lang.String) return java.lang.String';

FUNCTION deleteFilesOnDBServer (directory in VARCHAR2, fileNamePattern in VARCHAR2, fileNamePatternType in VARCHAR2, fileExtension in VARCHAR2) RETURN VARCHAR2
AS LANGUAGE JAVA 
NAME 'FileHandler.deleteFilesOnDBServer(java.lang.String, java.lang.String, java.lang.String, java.lang.String) return java.lang.String';

END File_API;
/

-- Support Default Cardinality
alter table CWPC_ITEMRELATION_V drop(DEFAULTQUANTITY);
alter table CWPC_ITEMRELATION_V add(DEFAULTQUANTITY NUMBER(4) default -1);

-- Update cwpc_on_remove trigger to support dot in CWMDTYPE
create or replace PROCEDURE cwpc_on_remove(objectId IN varchar2, objectCode IN varchar2, objectType IN varchar2)
AS
  v_paID VARCHAR2(256);
  v_recNo VARCHAR2(16);
	v_paMetadataType VARCHAR2(9);
	v_projectId VARCHAR2(10);
	v_projectCode VARCHAR2(32);
BEGIN
	
		select TYPEID into v_paMetadataType from CWMDTYPES where (TYPENAME = 'cwt_pc:cwt_projectAssignment' OR TYPENAME = 'cwt_pc.cwt_projectAssignment') AND ROWNUM = 1;
		
		IF objectCode IS NOT NULL and objectId is not null THEN

			select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType  AND ROWNUM = 1;
			select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType  AND ROWNUM = 1;
			select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;

			DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;   
		ELSE 
			IF objectCode is null THEN
				select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
				select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = objectType AND ROWNUM = 1;
				select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
				DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTID = objectId and OBJECTTYPE = objectType;
			ELSE 
				IF objectId is null THEN
					select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType AND ROWNUM = 1;
					select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType AND ROWNUM = 1;
					select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
					DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and OBJECTTYPE = objectType;
				END IF;
			END IF;
		END IF;
		
		IF v_paID IS NOT NULL THEN
		  insert into cwAuditTrail(recNo,docId,docMetadataType,topOrderMetaDataType,UPDATEDBY,LASTUPDATEDDATE,operationType) 
		  values(CWAUDITTRAILSEQ.NEXTVAL, v_paID, v_paMetadataType, -1, 'upadmin', SYSDATE, 'Del')
		  returning RECNO into v_recNo;
		END IF;
		IF v_recNo IS NOT NULL AND v_projectCode IS NOT NULL THEN
			INSERT INTO CWPROJECTAUDITTRAIL VALUES(v_recNo, v_projectCode);
		END IF;
		
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			dbms_output.put_line('NO record in CWPC_PROJECTCOMMAND TABLE is found for objectId:' || objectId || ' objectCode:' ||  objectCode || ' objectType:' || objectType);
    
END;
/

-- New Trigger to remove project command for charge type attribute and item charge type attribute

create or replace
TRIGGER cwpc_ctAttribute_remove AFTER
    DELETE
    ON cwpc_ctAttribute_v
    FOR EACH ROW
    BEGIN
		cwpc_on_remove(:old.CTATTRVERSIONID, null, 'cwt_pc:cwt_chargeTypeAttribute');
	END;
/
create or replace
TRIGGER cwpc_ictAttribute_remove AFTER
    DELETE
    ON cwpc_ictAttribute_v
    FOR EACH ROW
    BEGIN
		cwpc_on_remove(:old.ICTATTRVERSIONID, null, 'cwt_pc:cwt_itemChargeTypeAttribute');
	END;
/

-- New Procedure to retrieve a list of deleted object for reporting.

create or replace
PROCEDURE CWPC_GETDELOBJLIST 
(
  OBJECTID IN VARCHAR2
, OBJECTTYPE IN VARCHAR2  
, PARENTOBJECTID IN VARCHAR2
, PARENTOBJECTTYPE IN VARCHAR2
, RET_CURSOR OUT SYS_REFCURSOR  
) AS 
queryStr VARCHAR2(4000);
associatedQueryStr VARCHAR2(4000) := '';
singleQuote VARCHAR2(10) := '''';
associatedTypeQueryStr VARCHAR2(4000) := 'SELECT STARTDATE, NULL AS ID, NULL AS PARENTOBJECTCODE, NULL AS PARENTOBJECTTYPE, ' || SINGLEQUOTE || OBJECTTYPE || SINGLEQUOTE || ' AS ASSOCIATETYPE, ' || SINGLEQUOTE || OBJECTID || SINGLEQUOTE || ' AS ASSOCIATEOBJECTID, ';
sourceObjectQueryStr VARCHAR2(200) := 'SELECT STARTDATE, NULL AS ID, NULL AS PARENTOBJECTCODE, NULL AS PARENTOBJECTTYPE, NULL AS ASSOCIATETYPE, NULL AS ASSOCIATEOBJECTID, ';
criteriaQueryStr VARCHAR2(200) := 'IN (' || SINGLEQUOTE || OBJECTID || SINGLEQUOTE || ')';
itemCriteriaQueryStr VARCHAR2(200) := ' AND ITEMCODE=' || SINGLEQUOTE || PARENTOBJECTID || SINGLEQUOTE;
unionQueryStr VARCHAR2(20) := ' UNION ';
itemAttachmentQueryStr VARCHAR2(200) := 'ITEMATTACHMENTID AS CATALOGID, ITEMATTACHMENTCODE AS CATALOGCODE, ITEMATTACHMENTCODE AS CATALOGNAME,'  || singlequote || 'itemAttachment' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMATTACHMENT_V WHERE ITEMATTACHMENTCODE ';
itemAttributeQueryStr VARCHAR2(200) := 'ITEMATTRVERSIONID AS CATALOGID, ITEMATTRIBUTECODE AS CATALOGCODE, ITEMATTRIBUTECODE AS CATALOGNAME,'  || singlequote || 'itemAttribute' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMATTRIBUTE_V WHERE ITEMATTRIBUTECODE ';
itemChargeQueryStr VARCHAR2(200) := 'ITEMCHARGEVERSIONID AS CATALOGID, ITEMCHARGECODE AS CATALOGCODE, ITEMCHARGECODE AS CATALOGNAME,'  || singlequote || 'itemCharge' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMCHARGE_V WHERE ITEMCHARGECODE ';
itemDescriptionQueryStr VARCHAR2(200) := 'ITEMLABELID AS CATALOGID, ITEMLABELCODE AS CATALOGCODE, ITEMLABELCODE AS CATALOGNAME,'  || singlequote || 'itemDescription' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMLABEL_V WHERE ITEMLABELCODE ';
itemGroupQueryStr VARCHAR2(200) := 'ITEMGROUPID AS CATALOGID, ITEMGROUPCODE AS CATALOGCODE, ITEMGROUPCODE AS CATALOGNAME,'  || singlequote || 'itemGroup' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMGROUP_V WHERE ITEMGROUPCODE ';
itemImageQueryStr VARCHAR2(200) := 'ITEMIMAGEVERSIONID AS CATALOGID, ITEMIMAGECODE AS CATALOGCODE, ITEMIMAGECODE AS CATALOGNAME,'  || singlequote || 'itemImage' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMIMAGE_V WHERE ITEMIMAGECODE ';
itemRelationQueryStr VARCHAR2(200) := 'ITEMRELATIONVERSIONID AS CATALOGID, ITEMRELATIONCODE AS CATALOGCODE, ITEMRELATIONCODE AS CATALOGNAME,'  || singlequote || 'itemRelation' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMRELATION_V WHERE ITEMRELATIONCODE ';
systemIdQueryStr VARCHAR2(200) := 'SYSTEMIDENTIFIERID AS CATALOGID, SYSTEMID AS CATALOGCODE, SYSTEMID AS CATALOGNAME,'  || singlequote || 'systemID' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMRELATION_V WHERE ITEMRELATIONCODE ';
itemRuleQueryStr VARCHAR2(200) := 'ITEMRULEVERSIONID AS CATALOGID, ITEMRULECODE AS CATALOGCODE, ITEMRULECODE AS CATALOGNAME,'  || singlequote || 'itemRule' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEMRULE_V WHERE ITEMRULECODE ';
coreRestrictionQueryStr VARCHAR2(200) := 'RESTRICTIONID AS CATALOGID, RESTRICTIONNAME AS CATALOGCODE, RESTRICTIONNAME AS CATALOGNAME,' || singlequote || 'restriction' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_RESTRICTION_V ';
restrictionQueryStr VARCHAR2(200) := corerestrictionquerystr || ' RESTRICTIONNAME ';
ruleQueryStr VARCHAR2(200) := 'CATALOGRULEID AS CATALOGID, RULENAME AS CATALOGCODE, RULENAME AS CATALOGNAME,'  || singlequote || 'rule' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_CATALOGRULE_V WHERE RULENAME ';
chargeTypeQueryStr VARCHAR2(200) := 'CHARGETYPEVERSIONID AS CATALOGID, CHARGETYPECODE AS CATALOGCODE, CHARGETYPECODE AS CATALOGNAME,'  || singlequote || 'chargeType' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_CHARGETYPE_V WHERE CHARGETYPECODE ';
taxQueryStr VARCHAR2(200) := 'TAXVERSIONID AS CATALOGID, TAXCODE AS CATALOGCODE, TAXCODE AS CATALOGNAME,'  || singlequote || 'tax' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_TAX_V WHERE TAXCODE ';
taxModelQueryStr VARCHAR2(200) := 'TAXMODELVERSIONID AS CATALOGID, TAXMODELCODE AS CATALOGCODE, TAXMODELCODE AS CATALOGNAME,'  || singlequote || 'taxModel' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_TAXMODEL_V WHERE TAXMODELCODE ';
itemQueryStr VARCHAR2(200) := 'ITEMCODE AS CATALOGID, ITEMCODE AS CATALOGCODE, ITEMCODE AS CATALOGNAME,' || singlequote || 'item' || singlequote || ' AS CATALOGTYPE, UPDATEDBY FROM CWPC_ITEM WHERE ITEMCODE ';

subRestrictionQueryStr VARCHAR2(200) := corerestrictionquerystr || ' WHERE CATALOGOBJECTTYPE=';

BEGIN
  dbms_output.enable;
  dbms_output.put_line('Start GetDelObjList');
  IF OBJECTTYPE = 'itemAttribute' THEN
    queryStr := sourceobjectquerystr || itemattributequerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'itemAttachment' THEN
    querystr := sourceobjectquerystr || itemattachmentquerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'itemChargeVersion' THEN
    querystr := sourceobjectquerystr || itemchargequerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'itemDescription' THEN
    querystr := sourceobjectquerystr || itemdescriptionquerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'itemGroup' THEN
    querystr := sourceobjectquerystr || itemgroupquerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'itemImage' THEN
    querystr := sourceobjectquerystr || itemimagequerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'itemRelation' THEN
    querystr := sourceobjectquerystr || itemrelationquerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'systemIdentifier' THEN
    querystr := sourceobjectquerystr || systemidquerystr || criteriaquerystr || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'itemRule' or OBJECTTYPE = 'objectRule' THEN
    querystr := sourceobjectquerystr || itemrulequerystr || criteriaquerystr  || itemcriteriaquerystr;
  ELSIF OBJECTTYPE = 'restriction' THEN
    querystr := sourceobjectquerystr || restrictionquerystr || criteriaquerystr;
  ELSIF OBJECTTYPE = 'catalogRuleVersion' THEN
    querystr := sourceobjectquerystr || rulequerystr || criteriaquerystr;
  ELSIF OBJECTTYPE = 'chargeTypeVersion' THEN
    querystr := sourceobjectquerystr || chargetypequerystr || criteriaquerystr;
  ELSIF OBJECTTYPE = 'taxVersion' THEN
    querystr := sourceobjectquerystr || taxquerystr || criteriaquerystr;
  ELSIF OBJECTTYPE = 'taxModelVersion' THEN
    querystr := sourceobjectquerystr || taxmodelquerystr || criteriaquerystr;
  ELSIF OBJECTTYPE = 'itemNew' THEN
    querystr := sourceobjectquerystr || itemquerystr || criteriaquerystr;
  END IF;
  IF queryStr is not null THEN
    dbms_output.put_line('Start Open Cursor:' || queryStr || unionquerystr || associatedqueryStr);
    IF associatedqueryStr is not null THEN
      queryStr := queryStr || unionquerystr || associatedqueryStr;
    END IF;
    open ret_cursor for queryStr;
    dbms_output.put_line('End Open Cursor');
  END IF;
  dbms_output.put_line('End GetDelObjList');
  
END CWPC_GETDELOBJLIST;
/

-- New TRIGGER to remove version code table project assignment.
create or replace TRIGGER cwpc_versionCodeTable_remove AFTER
    DELETE
    ON CWDBCODETABLES
    FOR EACH ROW
    BEGIN
    IF :old.status IS NOT NULL THEN
		cwpc_on_remove(:old.codeTableId, null, 'cwt_pc:cwt_versionCodeTable');	
     END IF;
  END;
/


DROP INDEX UNI_ATTR_CODE_SOURCE
/
CREATE INDEX UNI_ATTR_CODE_SOURCE ON CWPC_ITEMATTRIBUTE_V (ITEMCODE,STARTDATE,ITEMRELATIONCODE,ITEMATTRIBUTECODE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMATTRIBUTE_V ON CWPC_ITEMATTRIBUTE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMATTRIBUTECODE ELSE NULL END)
/

DROP INDEX UNIQUE_CT_STARTDATE
/
CREATE INDEX UNIQUE_CT_STARTDATE ON CWPC_CHARGETYPE_V (CHARGETYPECODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_CHARGETYPE_V ON CWPC_CHARGETYPE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CHARGETYPECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

DROP INDEX UNIQUE_RESTRICTION
/
CREATE INDEX UNIQUE_RESTRICTION ON CWPC_RESTRICTION_V (RESTRICTIONNAME,STARTDATE,CATALOGOBJECTCODE,CATALOGOBJECTTYPE,ITEMCODE)
/

CREATE UNIQUE INDEX UNIQUE_CWPC_RESTRICTION_V ON CWPC_RESTRICTION_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN RESTRICTIONNAME ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTTYPE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END)
/

DROP INDEX UNIQUE_T_STARTDATE
/
CREATE INDEX UNIQUE_T_STARTDATE ON CWPC_TAX_V (TAXCODE, STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_TAX_V ON CWPC_TAX_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN TAXCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

DROP INDEX UNI_ITEM_CHARGETYPE
/
CREATE INDEX UNI_ITEM_CHARGETYPE ON CWPC_ITEMCHARGE_V (ITEMCODE,STARTDATE,ITEMCHARGECODE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMCHARGE_V ON CWPC_ITEMCHARGE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMGROUPCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCHARGECODE ELSE NULL END)
/

DROP INDEX ITEM_RULE_CODE_STARTDATE
/
CREATE INDEX ITEM_RULE_CODE_STARTDATE ON CWPC_ITEMRULE_V (ITEMCODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMRULE_V ON CWPC_ITEMRULE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRULECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTTYPE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

DROP INDEX UNI_IMAGE_CODE_SOURCE
/
CREATE INDEX UNI_IMAGE_CODE_SOURCE ON CWPC_ITEMIMAGE_V (ITEMCODE,IMAGESIZE,ITEMIMAGECODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMIMAGE_V ON CWPC_ITEMIMAGE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN IMAGESIZE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMIMAGECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END);
/

DROP INDEX UNI_ATTACH_CODE_SOURCE
/
CREATE INDEX UNI_ATTACH_CODE_SOURCE ON CWPC_ITEMATTACHMENT_V (ITEMCODE,ITEMATTACHMENTCODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMATTACHMENT_V ON CWPC_ITEMATTACHMENT_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMATTACHMENTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

DROP INDEX  UNI_REL_CODE_SOURCE
/
CREATE INDEX UNI_REL_CODE_SOURCE ON CWPC_ITEMRELATION_V (ITEMCODE,STARTDATE,ITEMRELATIONCODE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMRELATION_V ON CWPC_ITEMRELATION_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRELATIONCODE ELSE NULL END)
/

DROP INDEX  UNIQUE_ITEM_DESCRIPTION
/
CREATE INDEX UNIQUE_ITEM_DESCRIPTION ON CWPC_ITEMLABEL_V (ITEMCODE,ITEMLABELCODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMLABEL_V ON CWPC_ITEMLABEL_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMLABELCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

DROP INDEX UNI_GROUP_CODE_SOURCE
/
CREATE INDEX UNI_GROUP_CODE_SOURCE ON CWPC_ITEMGROUP_V (ITEMCODE,STARTDATE,ITEMGROUPCODE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMGROUP_V ON CWPC_ITEMGROUP_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMGROUPCODE ELSE NULL END)
/

DROP INDEX UNIQUE_R_STARTDATE
/
CREATE INDEX UNIQUE_R_STARTDATE ON CWPC_CATALOGRULE_V (STARTDATE,RULENAME)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_CATALOGRULE_V ON CWPC_CATALOGRULE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN RULENAME ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

DROP INDEX UNIQUE_TM_STARTDATE;
/
CREATE INDEX UNIQUE_TM_STARTDATE ON CWPC_TAXMODEL_V (STARTDATE,TAXMODELCODE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_TAXMODEL_V ON CWPC_TAXMODEL_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN TAXMODELCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

DROP INDEX UNIQUE_IT_STARTDATE
/
CREATE INDEX UNIQUE_IT_STARTDATE ON CWPC_INFOTABLE (INFOMODELCODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_INFOTABLE ON CWPC_INFOTABLE (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN INFOMODELCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

CREATE INDEX IX_CTATTRIBUTE ON CWPC_CTATTRIBUTE_V (CTCODE,CTATTRIBUTECODE,CTRELATIONCODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_CTATTRIBUTE_V ON CWPC_CTATTRIBUTE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CTATTRIBUTECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CTRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

CREATE INDEX IX_ICTATTRIBUTE ON CWPC_ICTATTRIBUTE_V (ITEMCODE,ICTCODE,ICTRELATIONCODE,ICTATTRIBUTECODE,STARTDATE)
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ICTATTRIBUTE_V ON CWPC_ICTATTRIBUTE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ICTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ICTRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ICTATTRIBUTECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END)
/

create or replace PROCEDURE DISABLECONSTRAINTS AS
    CURSOR curDisable IS
        SELECT 'ALTER TABLE ' || TABLE_NAME || ' DISABLE CONSTRAINT ' || CONSTRAINT_NAME AS STMT
        FROM   USER_CONSTRAINTS
        WHERE  CONSTRAINT_TYPE = 'R'        
        AND    CONSTRAINT_NAME IN ('ITEMRELATION_TARGET', 'TARGETTAX', 'DISCOUNT_TARGET_CHARGE', 'BASE_ITEM', 'PARENTHIERARCHY','TARGETTAXMODEL');
	BEGIN
    -- Disable Constraints
		FOR cur IN curDisable LOOP
			EXECUTE IMMEDIATE cur.STMT;
		END LOOP;
	END;
/

create or replace PROCEDURE ENABLECONSTRAINTS AS
    CURSOR curEnable IS
        SELECT 'ALTER TABLE ' || TABLE_NAME || ' ENABLE CONSTRAINT ' || CONSTRAINT_NAME AS STMT
        FROM   USER_CONSTRAINTS
        WHERE  CONSTRAINT_TYPE = 'R'
        AND    CONSTRAINT_NAME IN ('ITEMRELATION_TARGET', 'TARGETTAX', 'DISCOUNT_TARGET_CHARGE', 'BASE_ITEM', 'PARENTHIERARCHY','TARGETTAXMODEL');
	BEGIN
    -- Enable Constraints
		FOR cur IN curEnable LOOP
			EXECUTE IMMEDIATE cur.STMT;
		END LOOP;
	END;
/


-- item Action
create or replace TRIGGER cwpc_itemAction_remove AFTER
    DELETE
    ON cwpc_itemAction_v
    FOR EACH ROW
    BEGIN
		cwpc_on_remove(:old.ITEMACTIONID, :old.itemCode, 'cwt_pc:cwt_itemAction');	
	END;
/
ALTER TABLE  CWPC_ITEMACTION_V MODIFY VERSIONCOMMITDATE NOT NULL;
CREATE INDEX IX_ITEMACTION ON CWPC_ITEMACTION_V (ITEMCODE);
ALTER TABLE  CWPC_ITEMACTION_V MODIFY ITEMCODE NOT NULL;
ALTER TABLE  CWPC_ITEMACTION_V MODIFY ITEMACTIONCODE NOT NULL;
ALTER TABLE CWPC_ITEMACTION_V ADD CONSTRAINT ITEMACTION FOREIGN KEY (ITEMCODE) REFERENCES CWPC_ITEM (ITEMCODE) ON DELETE CASCADE;
/

-- business date
CREATE INDEX IX_BUSINESSDATE_MODEL ON CWPC_BUSINESSDATEMODELDATES (DATESMODELCODE);
ALTER TABLE CWPC_BUSINESSDATEMODELDATES ADD CONSTRAINT DATE_MODEL FOREIGN KEY (DATESMODELCODE) REFERENCES CWPC_BUSINESSDATEMODEL (MODELCODE);
CREATE INDEX IX_BUSINESSDATE_DEFINITIONCODE ON CWPC_BUSINESSDATEMODELDATES (DATEMODELDEFINITIONCODE);
ALTER TABLE CWPC_BUSINESSDATEMODELDATES ADD CONSTRAINT DATE_DEFINITION FOREIGN KEY (DATEMODELDEFINITIONCODE) REFERENCES CWPC_BUSINESSDATEDEFINITION (CODE) ;
CREATE INDEX IX_ITEMBUSINESSDATES_MODEL ON CWPC_ITEMBUSINESSDATES_V (DATESMODELCODE) ;
ALTER TABLE CWPC_ITEMBUSINESSDATES_V ADD CONSTRAINT ITEMDATE_MODEL FOREIGN KEY (DATESMODELCODE) REFERENCES CWPC_BUSINESSDATEMODEL (MODELCODE);
ALTER TABLE CWPC_ITEMBUSINESSDATES_V ADD CONSTRAINT ITEMDATE_VALUE FOREIGN KEY (BUSINESSDATESVALUEID) REFERENCES CWPC_BUSINESSDATESVALUE (ID);
CREATE INDEX IX_ITEMDATE ON CWPC_ITEMBUSINESSDATES_V (ITEMCODE) ;
ALTER TABLE CWPC_ITEMBUSINESSDATES_V ADD CONSTRAINT ITEMDATE FOREIGN KEY (ITEMCODE) REFERENCES CWPC_ITEM (ITEMCODE) ON DELETE CASCADE ;
CREATE UNIQUE INDEX UNI_MODELDATES ON CWPC_BUSINESSDATEMODELDATES (DATESMODELCODE,DATESMODELDATECODE);


ALTER TABLE  CWPC_BUSINESSDATEMODELDATES MODIFY DATESMODELCODE NOT NULL;
ALTER TABLE  CWPC_BUSINESSDATEMODELDATES MODIFY DATESMODELDATECODE NOT NULL;
ALTER TABLE  CWPC_ITEMBUSINESSDATES_V MODIFY BUSINESSDATESVALUEID NOT NULL;
ALTER TABLE  CWPC_ITEMBUSINESSDATES_V MODIFY DATESMODELCODE NOT NULL;
ALTER TABLE  CWPC_ITEMBUSINESSDATES_V MODIFY ITEMBUSINESSDATESCODE NOT NULL;
ALTER TABLE  CWPC_ITEMBUSINESSDATES_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_MARKETSEGMENTDIMENSION MODIFY TREECODE NOT NULL;
ALTER TABLE  CWPC_MARKETSEGMENTDIMENSION MODIFY MSDIMENSIONVALUELEAFNAME NOT NULL;

-- item market segment rule
CREATE UNIQUE INDEX UNI_MARKETSEGMENTRULE ON CWPC_ITEMMARKETSEGMENTRULE (ITEMMARKLETSEGMENTRULECODE,ITEMCODE,CATALOGOBJECTCODE,CATALOGOBJECTTYPE);
CREATE INDEX IX_ITEMMSRULE ON CWPC_ITEMMARKETSEGMENTRULE (ITEMCODE) ;
ALTER TABLE CWPC_ITEMMARKETSEGMENTRULE ADD CONSTRAINT ITEMMSRULE FOREIGN KEY (ITEMCODE) REFERENCES CWPC_ITEM (ITEMCODE) ON DELETE CASCADE ;
ALTER TABLE CWPC_ITEMMARKETSEGMENTRULE ADD CONSTRAINT ITEMMSRULEVALUE FOREIGN KEY (MARKETSEGMENTID) REFERENCES CWPC_MARKETSEGMENT (MARKETSEGMENTID) ;

ALTER TABLE  CWPC_ITEMMARKETSEGMENTRULE MODIFY MARKETSEGMENTID NOT NULL;
ALTER TABLE  CWPC_ITEMMARKETSEGMENTRULE MODIFY ITEMCODE NOT NULL;
ALTER TABLE  CWPC_ITEMMARKETSEGMENTRULE MODIFY ITEMMARKLETSEGMENTRULECODE NOT NULL;
/

-- TRIGGER
create or replace TRIGGER CWPC_DATESMODEL_REMOVE AFTER
    DELETE
    ON CWPC_BUSINESSDATEMODEL
    FOR EACH ROW
    BEGIN
    	cwpc_on_remove( null, :old.MODELCODE, 'cwt_pc:cwt_businessDateModel');	
END;
/
create or replace TRIGGER CWPC_MODELDATES_REMOVE AFTER
    DELETE
    ON CWPC_BUSINESSDATEMODELDATES
    FOR EACH ROW
    BEGIN
    	cwpc_on_remove(:old.ID, null, 'cwt_pc:cwt_businessDateModelDates');
END;
/
create or replace TRIGGER CWPC_BUSINESSDATEDEF_REMOVE AFTER
    DELETE
    ON CWPC_BUSINESSDATEDEFINITION
    FOR EACH ROW
    BEGIN
    	cwpc_on_remove(null, :old.code, 'cwt_pc:cwt_businessDateDefinition');	
END;
/
create or replace TRIGGER CWPC_ITEMBDVERSION_REMOVE AFTER
    DELETE
    ON CWPC_ITEMBUSINESSDATES_V
    FOR EACH ROW
    BEGIN
    	cwpc_on_remove(:old.ITEMBUSINESSDATEVERSIONID, null, 'cwt_pc:cwt_itemBusinessDatesVersion');	
END;
/
create or replace TRIGGER CWPC_ITEMMSRULE_REMOVE AFTER
    DELETE
    ON CWPC_ITEMMARKETSEGMENTRULE
    FOR EACH ROW
    BEGIN
    	cwpc_on_remove(:old.ITEMMARKETSEGMENTRULEID, null, 'cwt_pc:cwt_itemMarketSegmentRule');	
END;
/
create or replace TRIGGER CWPC_MSDIMENSION_REMOVE AFTER
    DELETE
    ON CWPC_MARKETSEGMENTDIMENSION
    FOR EACH ROW
    BEGIN
    	cwpc_on_remove(null, :old.DIMENSIONCODE, 'cwt_pc:cwt_marketSegmentDimensions');	
END;
/


--Procedure which migrates PLM model from 5 to 6. Version 6 stores all templates in SOF
--
create or replace
PROCEDURE PLM_MIGRATE60 AS 
TYPE c_cursor IS REF CURSOR;
  
  v_fpstas_counter number := 1000;
  v_counter number := 0;
  v_default_fps_id CWT_FPS.id%type;
  v_fps_id CWT_FPS.id%type;
  v_tas_id CWT_TAS.id%type;
  v_config_name CWPL_CONFIGSTAGE.configname%type;
  v_stage CWPL_CONFIGSTAGE.stage%type;
  v_priority CWPL_CONFIGSTAGE.priority%type;  
  plm_config_cur c_cursor;
  plm_tas_cur c_cursor;
  plm_default_template_cur c_cursor;
  

BEGIN       
  --Assigns stage sequence from PLM
   v_counter := 0;
   OPEN plm_config_cur FOR select fps.id as fps_id, tas.id as tas_id, cfg.configname, cfg.stage, cfg.priority from CWPL_CONFIGSTAGE cfg, CWT_TAS tas, CWT_FPS fps where tas.taskstage = cfg.stage and fps.name = cfg.configname;
   LOOP      
      FETCH plm_config_cur into v_fps_id, v_tas_id, v_config_name, v_stage, v_priority;
      --dbms_output.put_line(v_fps_id || ' ' || v_tas_id || ' ' || v_config_name || ' ' || v_stage || ' ' || v_priority);
      UPDATE CWT_FPSTAS fpt SET sortsequence = v_priority where fpt.tasref = v_tas_id and fpt.fpsref = v_fps_id;
      UPDATE CWT_FPS set state = 'ACT' where id = v_fps_id;      
      EXIT WHEN plm_config_cur%notfound;
	  v_counter := v_counter+1;
   END LOOP;
   CLOSE plm_config_cur;   
   COMMIT;
   dbms_output.put_line(v_counter || ' PLM template TASs were migrated.');
  
  --Get the id for the default template, create a new one if it doesn't exist.  
  BEGIN
      SELECT fps.id INTO v_default_fps_id from CWT_FPS fps where fps.name ='plm_def_template';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN v_default_fps_id := NULL;
  END;
    
  IF v_default_fps_id is null THEN
       INSERT INTO CWT_FPS (id, name, label, state) VALUES('plm1500000','plm_def_template', 'PLM Default Template', 'DEF');
       SELECT id INTO v_default_fps_id from CWT_FPS where name ='plm_def_template';     
       dbms_output.put_line('plm_def_template FPS template created.');
  ELSE
       dbms_output.put_line('plm_def_template FPS template was reset.');
       DELETE FROM CWT_FPSTAS where fpsref = v_default_fps_id;
  END IF;

  v_counter := 0;
  OPEN plm_default_template_cur FOR select tas.id from CWT_TAS tas where participants not in ('setup','intermediate','teardown','main');
  LOOP   
    FETCH plm_default_template_cur into v_tas_id;
    --dbms_output.put_line('Associating TAS ' || v_tas_id || ' with default template ' || v_default_fps_id );
    INSERT INTO CWT_FPSTAS (id, tasref, fpsref) VALUES(concat('tasfps',v_fpstas_counter), v_tas_id, v_default_fps_id);
    v_fpstas_counter := v_fpstas_counter+1;    
    EXIT WHEN plm_default_template_cur%notfound;    
	v_counter := v_counter+1;
  END LOOP;
  CLOSE plm_default_template_cur;     
  dbms_output.put_line(v_counter || ' TASs were associated with plm_def_template FPS.');
  
  COMMIT;

--Sets the Microflow type to MF. Assumes all TASs are of MF type which are from PLM. They have the taskstage column populated
update CWT_TAS set type = 'MF' where taskstage is not null;
-- Assigns the Participant to the TAS level
update CWT_TAS set participant = participants where taskstage is not null;
-- Assigns the Participant to the Microflow level
update CWT_MICROFLOW mf SET mf.participant = ( select tas.participants from CWT_TAS tas where tas.microflowref = mf.id and ROWNUM = 1 ) where (METADATANAME like 'cwt_pclm:%' OR METADATANAME like 'cwt_pclm.%');
-- Uses Participant Operation for storing PLM action Approval
update CWT_MICROFLOW mf SET mf.participantoperation = '0' where instr(upper(mf.metadataname),'APPROV') > 0 AND (METADATANAME like 'cwt_pclm:%' OR METADATANAME like 'cwt_pclm.%');
-- Uses Participant Operation for storing PLM action Create
update CWT_MICROFLOW mf SET mf.participantoperation = '1' where instr(upper(mf.metadataname),'CREATE') > 0 AND (METADATANAME like 'cwt_pclm:%' OR METADATANAME like 'cwt_pclm.%');
-- Sets remaining microflows with participantoperation as 0
update CWT_MICROFLOW mf SET mf.participantoperation = '0' where (mf.METADATANAME like 'cwt_pclm:%' OR METADATANAME like 'cwt_pclm.%') AND mf.participantoperation is null ;

-- Labels Existing TASs with Stage name
update CWT_TAS tas SET tas.label = ( select stage.label from CWPL_PLMSTAGES stage where stage.stage = tas.taskstage and ROWNUM = 1 ) where tas.taskstage is not null;
-- Adds ' : ' to the label
update CWT_TAS tas SET tas.label = concat(tas.label, ' : ') where tas.taskstage is not null; 
-- Adds Participant Label to TAS label
update CWT_TAS tas SET tas.label = concat(tas.label, ( select p.label from CWPL_PLMPARTICIPANTS p where p.participant = tas.participants and ROWNUM = 1 ) ) where tas.taskstage is not null;
-- Adds action approve to TAS label
update CWT_TAS tas SET tas.label = concat(tas.label, ' : approve') where action = 0 and tas.taskstage is not null;
--Adds action assigned to TAS label
update CWT_TAS tas SET tas.label = concat(tas.label, ' : assigned') where action = 1 and tas.taskstage is not null;
--Assigns participant to TAS label for TASs which don't have real participant
update CWT_TAS tas SET tas.label = concat(concat(tas.label, ' '),tas.participant) where participantmessage is null and tas.taskstage is not null;
--Sets the participant message
update CWT_TAS tas SET tas.participantmessage = tas.label where tas.taskstage is not null;

COMMIT;
  
END PLM_MIGRATE60;
/
--Calls migration stored proc
CALL PLM_MIGRATE60();
/
DROP PROCEDURE PLM_MIGRATE60; 
/

-- add versionCommitDate
UPDATE  CWPC_CATALOGRULE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_INFOTABLE  SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_TAX_V  SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  cwpc_TAXMODEL_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_CHARGETYPE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_CTATTRIBUTE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMRELATION_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMATTACHMENT_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMACTION_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMGROUP_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMIMAGE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMRULE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMLABEL_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMATTRIBUTE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ITEMCHARGE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_ICTATTRIBUTE_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;
UPDATE  CWPC_RESTRICTION_V SET VERSIONCOMMITDATE = STARTDATE WHERE VERSIONCOMMITDATE IS NULL;

ALTER TABLE  CWPC_CATALOGRULE_V  MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_INFOTABLE  MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_TAX_V  MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  cwpc_TAXMODEL_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_CHARGETYPE_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_CTATTRIBUTE_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMRELATION_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMATTACHMENT_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMACTION_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMGROUP_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMIMAGE_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMRULE_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMLABEL_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMATTRIBUTE_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ITEMCHARGE_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_ICTATTRIBUTE_V MODIFY VERSIONCOMMITDATE NOT NULL;
ALTER TABLE  CWPC_RESTRICTION_V MODIFY VERSIONCOMMITDATE NOT NULL;
/

DROP INDEX UNIQUE_CWPC_ITEMATTRIBUTE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMATTRIBUTE_V ON CWPC_ITEMATTRIBUTE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMATTRIBUTECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_CHARGETYPE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_CHARGETYPE_V ON CWPC_CHARGETYPE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CHARGETYPECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_RESTRICTION_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_RESTRICTION_V ON CWPC_RESTRICTION_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN RESTRICTIONNAME ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTTYPE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_TAX_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_TAX_V ON CWPC_TAX_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN TAXCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_ITEMCHARGE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMCHARGE_V ON CWPC_ITEMCHARGE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMGROUPCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCHARGECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_ITEMRULE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMRULE_V ON CWPC_ITEMRULE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRULECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTTYPE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_ITEMIMAGE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMIMAGE_V ON CWPC_ITEMIMAGE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN IMAGESIZE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMIMAGECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_ITEMATTACHMENT_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMATTACHMENT_V ON CWPC_ITEMATTACHMENT_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMATTACHMENTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX  UNIQUE_CWPC_ITEMRELATION_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMRELATION_V ON CWPC_ITEMRELATION_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX  UNIQUE_CWPC_ITEMLABEL_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMLABEL_V ON CWPC_ITEMLABEL_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMLABELCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_ITEMGROUP_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMGROUP_V ON CWPC_ITEMGROUP_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMGROUPCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_CATALOGRULE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_CATALOGRULE_V ON CWPC_CATALOGRULE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN RULENAME ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_TAXMODEL_V;
/
CREATE UNIQUE INDEX UNIQUE_CWPC_TAXMODEL_V ON CWPC_TAXMODEL_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN TAXMODELCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_INFOTABLE
/
CREATE UNIQUE INDEX UNIQUE_CWPC_INFOTABLE ON CWPC_INFOTABLE (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN INFOMODELCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_CTATTRIBUTE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_CTATTRIBUTE_V ON CWPC_CTATTRIBUTE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CTATTRIBUTECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CTRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_ICTATTRIBUTE_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ICTATTRIBUTE_V ON CWPC_ICTATTRIBUTE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ICTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ICTRELATIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ICTATTRIBUTECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_CWPC_ITEMACTION_V
/
CREATE UNIQUE INDEX UNIQUE_CWPC_ITEMACTION_V ON CWPC_ITEMACTION_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMACTIONCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP INDEX UNIQUE_BUSINESSDATES
/
CREATE UNIQUE INDEX UNIQUE_BUSINESSDATES ON CWPC_ITEMBUSINESSDATES_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN ITEMBUSINESSDATESCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTCODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CATALOGOBJECTTYPE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

-- index for new premission type
DROP  INDEX UNIQUE_PERMISSION
/
CREATE UNIQUE INDEX UNIQUE_PERMISSION ON CWPC_PERMISSION (PRIVILEGE,OBJECTTYPE,ACTION,TYPE)
/

--Index for catalog ui preference
DROP  INDEX CWPC_CATUIPREF_PALETTE
/
CREATE UNIQUE INDEX "CWPC_CATALOGUIPREFERENCES_PK" ON "CWPC_CATALOGUIPREFERENCES" ("ID")
/
CREATE INDEX "CWPC_CATUIPREF_PALETTE" ON "CWPC_CATALOGUIPREFERENCES" ("USERID", "PREFERENCECATEGORY", "CATALOGOBJECTCODE")
/
ALTER TABLE "CWPC_CATALOGUIPREFERENCES" ADD CONSTRAINT "CWPC_CATALOGUIPREFERENCES_PK" PRIMARY KEY ("ID") ENABLE
/
ALTER TABLE "CWPC_CATALOGUIPREFERENCES" MODIFY ("ID" NOT NULL ENABLE)
/


-- add auditable to code table
INSERT INTO CWDBCODETABLES (CTTYPE, CODE, ACTIVE, DESCRIPTION, PARAM, UPDATEDBY, LASTUPDATEDDATE)
VALUES ('cwt_classification', 'AUDIT', 1, INSERT_TRANSTXT('Auditable'), null, 'upadmin', sysdate);
/

create or replace PROCEDURE cwpc_on_remove(objectId IN varchar2, objectCode IN varchar2, pObjectType IN varchar2)
AS
  v_paID VARCHAR2(256);
  v_recNo VARCHAR2(16);
	v_paMetadataType VARCHAR2(9);
	v_projectId VARCHAR2(10);
	v_projectCode VARCHAR2(32);
BEGIN
	
		select TYPEID into v_paMetadataType from CWMDTYPES where (TYPENAME = 'cwt_pc:cwt_projectAssignment' OR TYPENAME = 'cwt_pc.cwt_projectAssignment') AND ROWNUM = 1;
		
		IF objectCode IS NOT NULL and objectId is not null THEN

			select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType  AND ROWNUM = 1;
			select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType  AND ROWNUM = 1;
			select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;

			DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType;   
		ELSE 
			IF objectCode is null THEN
				select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType AND ROWNUM = 1;
				select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType AND ROWNUM = 1;
				select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
				DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType;
			ELSE 
				IF objectId is null THEN
					select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = pObjectType AND ROWNUM = 1;
					select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = pObjectType AND ROWNUM = 1;
					select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
					DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and OBJECTTYPE = pObjectType;
				END IF;
			END IF;
		END IF;
		
		IF v_paID IS NOT NULL THEN
		  insert into cwAuditTrail(recNo,docId,docMetadataType,topOrderMetaDataType,UPDATEDBY,LASTUPDATEDDATE,operationType) 
		  values(CWAUDITTRAILSEQ.NEXTVAL, v_paID, v_paMetadataType, -1, 'upadmin', SYSDATE, 'Del')
		  returning RECNO into v_recNo;
		END IF;
		IF v_recNo IS NOT NULL AND v_projectCode IS NOT NULL THEN
			INSERT INTO CWPROJECTAUDITTRAIL VALUES(v_recNo, v_projectCode);
		END IF;
		
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			dbms_output.put_line('NO record in CWPC_PROJECTCOMMAND TABLE is found for objectId:' || objectId || ' objectCode:' ||  objectCode || ' objectType:' || pObjectType);
    
END;
/


create or replace TRIGGER cwpc_associatnTypAttr_remove AFTER
 DELETE
 ON cwpc_associationTypeAttr
 FOR EACH ROW
 BEGIN
  cwpc_on_remove(:old.ASSOCIATIONTYPEATTRIBUTEID, null, 'cwt_pc:cwt_relationTypeAttribute');	
END;
/



--drop catalog rule in order to alter rule name to have longer length for implementationValue
DROP INDEX UNIQUE_R_STARTDATE;
DROP INDEX UNIQUE_CWPC_CATALOGRULE_V;
/
ALTER TABLE CWPC_CATALOGRULE_V MODIFY (
	RULENAME VARCHAR2(255)
);
/
CREATE UNIQUE INDEX UNIQUE_CWPC_CATALOGRULE_V ON CWPC_CATALOGRULE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN RULENAME ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END);

CREATE INDEX UNIQUE_R_STARTDATE ON CWPC_CATALOGRULE_V (STARTDATE,RULENAME);
/


--drop catalog rule in order to alter rule name to have longer length for implementationValue
DROP INDEX UNIQUE_R_STARTDATE;
DROP INDEX UNIQUE_CWPC_CATALOGRULE_V;
/
ALTER TABLE CWPC_CATALOGRULE_V MODIFY (
	RULENAME VARCHAR2(32)
);
/
ALTER TABLE CWPC_ITEMACTION_V MODIFY (
	IMPLEMENTATIONVALUE VARCHAR2(255 )
);

/
CREATE UNIQUE INDEX UNIQUE_CWPC_CATALOGRULE_V ON CWPC_CATALOGRULE_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN RULENAME ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END);

CREATE INDEX UNIQUE_R_STARTDATE ON CWPC_CATALOGRULE_V (STARTDATE,RULENAME);
/


create or replace PROCEDURE cwpc_on_remove(objectId IN varchar2, objectCode IN varchar2, pObjectType IN varchar2)
AS
  v_paID VARCHAR2(256);
  v_recNo VARCHAR2(16);
	v_paMetadataType VARCHAR2(9);
	v_projectId VARCHAR2(10);
	v_projectCode VARCHAR2(32);
BEGIN
	
		select TYPEID into v_paMetadataType from CWMDTYPES where (TYPENAME = 'cwt_pc:cwt_projectAssignment' OR TYPENAME = 'cwt_pc.cwt_projectAssignment') AND ROWNUM = 1;
		
		IF objectCode IS NOT NULL and objectId is not null THEN

			select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType  AND ROWNUM = 1;
			select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType  AND ROWNUM = 1;
			select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;

			DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType;   
		ELSE 
			IF objectCode is null THEN
				select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType AND ROWNUM = 1;
				select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType AND ROWNUM = 1;
				select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
				DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTID = objectId and OBJECTTYPE = pObjectType;
			ELSE 
				IF objectId is null THEN
					select PROJECTASSIGNMENTID into v_paID from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = pObjectType AND ROWNUM = 1;
					select PROJECTID into v_projectId from CWPC_PROJECTCOMMAND where CATALOGOBJECTCODE = objectCode and OBJECTTYPE = pObjectType AND ROWNUM = 1;
					select PROJECTCODE into v_projectCode from CWPC_PROJECT where PROJECTID = v_projectId AND ROWNUM = 1;
					DELETE FROM CWPC_PROJECTCOMMAND WHERE CATALOGOBJECTCODE = objectCode and OBJECTTYPE = pObjectType;
				END IF;
			END IF;
		END IF;
		
		IF v_paID IS NOT NULL THEN
		  insert into cwAuditTrail(recNo,docId,docMetadataType,topOrderMetaDataType,UPDATEDBY,LASTUPDATEDDATE,operationType,ipaddress,transaction_id) 
		  values(CWAUDITTRAILSEQ.NEXTVAL, v_paID, v_paMetadataType, -1, 'upadmin', SYSDATE, 'Del', ' ', 0)
		  returning RECNO into v_recNo;
		END IF;
		IF v_recNo IS NOT NULL AND v_projectCode IS NOT NULL THEN
			INSERT INTO CWPROJECTAUDITTRAIL(RECNO, PROJECTCODE)VALUES(v_recNo, v_projectCode);
		END IF;
		
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			dbms_output.put_line('NO record in CWPC_PROJECTCOMMAND TABLE is found for objectId:' || objectId || ' objectCode:' ||  objectCode || ' objectType:' || pObjectType);
    
END;
/


INSERT INTO CWDBCODETABLES (CTTYPE, CODE, ACTIVE, DESCRIPTION, PARAM, UPDATEDBY, LASTUPDATEDDATE)
VALUES ('cwt_classification_attribute', 'STORFRT', 1, INSERT_TRANSTXT('Storefront'), null, 'upadmin', sysdate);
/

create or replace
TRIGGER cwpc_chargeTypeRelation_remove AFTER
    DELETE
    ON cwpc_chargeTypeRelation_v
    FOR EACH ROW
    BEGIN
		cwpc_on_remove(:old.CHARGETYPERELATIONVERSIONID, null, 'cwt_pc:cwt_chargeTypeRelation');
	END;
/


DECLARE
	table_exists NUMBER;
	s_sql VARCHAR2(500);
	v_column_exists NUMBER;
BEGIN
-- table CWPC_CHARGETYPERELATION has been deprecated. Using table CWPC_CHARGETYPERELATION_V instead.
	SELECT COUNT(*) INTO table_exists FROM user_tables WHERE TABLE_NAME = 'CWPC_CHARGETYPERELATION' AND ROWNUM = 1;
	IF table_exists = 1 THEN
		s_sql := 'DROP TABLE CWPC_CHARGETYPERELATION';
		EXECUTE IMMEDIATE s_sql;
	END IF;

-- rename table columns	
	SELECT COUNT(*) INTO table_exists FROM user_tables WHERE TABLE_NAME = 'CWPC_CHARGETYPERELATION_V' AND ROWNUM = 1;
	IF table_exists = 1 THEN
	
		SELECT COUNT(*) into v_column_exists from USER_TAB_COLS where column_name = 'TARGETENTITYCODE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (v_column_exists = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V RENAME COLUMN TARGETENTITYCODE TO CHARGETYPERELATIONTARGET';
		end if;
		
		SELECT COUNT(*) into v_column_exists from USER_TAB_COLS where column_name = 'TYPE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (v_column_exists = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V RENAME COLUMN TYPE TO ASSOCIATIONTYPE';
		end if;
		
		SELECT COUNT(*) into v_column_exists from USER_TAB_COLS where column_name = 'SOURCEENTITYCODE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (v_column_exists = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V RENAME COLUMN SOURCEENTITYCODE TO CHARGETYPECODE';
		end if;
		
		SELECT COUNT(*) into v_column_exists from USER_TAB_COLS where column_name = 'MINQUANTITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (v_column_exists = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V RENAME COLUMN MINQUANTITY TO MIN_QUANTITY';
		end if;
		
		SELECT COUNT(*) into v_column_exists from USER_TAB_COLS where column_name = 'MAXQUANTITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (v_column_exists = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V RENAME COLUMN MAXQUANTITY TO MAX_QUANTITY';
		end if;
		
		SELECT COUNT(*) into v_column_exists from USER_TAB_COLS where column_name = 'TARGETENTITYTYPE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (v_column_exists = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V RENAME COLUMN TARGETENTITYTYPE TO CATALOGOBJECTTYPE';
		end if;
		
		SELECT COUNT(*) into v_column_exists from USER_TAB_COLS where column_name = 'DEFAULTCARDINALITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (v_column_exists = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V RENAME COLUMN DEFAULTCARDINALITY TO DEFAULTQUANTITY';
		end if;
	END IF;
END;
/


--trigger required updates: table name changed to 'CWPC_CHARGETYPERELATION_V' and document name changed to cwt_pc:cwt_chargeTypeRelation
create or replace TRIGGER cwpc_chargeTypeRelation_remove AFTER
	DELETE
	ON cwpc_chargeTypeRelation_v
	FOR EACH ROW
	BEGIN
		cwpc_on_remove(:old.CHARGETYPERELATIONVERSIONID, null, 'cwt_pc:cwt_chargeTypeRelation');
	END;
/

DECLARE
  has_old NUMBER;
  has_new NUMBER;
BEGIN
		SELECT COUNT(*) into has_old from USER_TAB_COLS where column_name = 'TARGETENTITYCODE' and table_name = 'CWPC_CHARGETYPERELATION_V';
    SELECT COUNT(*) into has_new from USER_TAB_COLS where column_name = 'CHARGETYPERELATIONTARGET' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (has_old = 1 and has_new = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V DROP COLUMN TARGETENTITYCODE';
		end if;
		
		SELECT COUNT(*) into has_old from USER_TAB_COLS where column_name = 'TYPE' and table_name = 'CWPC_CHARGETYPERELATION_V';
    SELECT COUNT(*) into has_new from USER_TAB_COLS where column_name = 'ASSOCIATIONTYPE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (has_old = 1 and has_new = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V DROP COLUMN TYPE';
		end if;
		
		SELECT COUNT(*) into has_old from USER_TAB_COLS where column_name = 'SOURCEENTITYCODE' and table_name = 'CWPC_CHARGETYPERELATION_V';
    SELECT COUNT(*) into has_new from USER_TAB_COLS where column_name = 'CHARGETYPECODE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (has_old = 1 and has_new = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V DROP COLUMN SOURCEENTITYCODE';
		end if;
		
		SELECT COUNT(*) into has_old from USER_TAB_COLS where column_name = 'MINQUANTITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
    SELECT COUNT(*) into has_new from USER_TAB_COLS where column_name = 'MIN_QUANTITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (has_old = 1 and has_new = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V DROP COLUMN MINQUANTITY';
		end if;
		
		SELECT COUNT(*) into has_old from USER_TAB_COLS where column_name = 'MAXQUANTITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		SELECT COUNT(*) into has_new from USER_TAB_COLS where column_name = 'MAX_QUANTITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (has_old = 1 and has_new = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V DROP COLUMN MAXQUANTITY';
		end if;
		
		SELECT COUNT(*) into has_old from USER_TAB_COLS where column_name = 'TARGETENTITYTYPE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		SELECT COUNT(*) into has_new from USER_TAB_COLS where column_name = 'CATALOGOBJECTTYPE' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (has_old = 1 and has_new = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V DROP COLUMN TARGETENTITYTYPE';
		end if;
		
		SELECT COUNT(*) into has_old from USER_TAB_COLS where column_name = 'DEFAULTCARDINALITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		SELECT COUNT(*) into has_new from USER_TAB_COLS where column_name = 'DEFAULTQUANTITY' and table_name = 'CWPC_CHARGETYPERELATION_V';
		if (has_old = 1 and has_new = 1) then
			EXECUTE IMMEDIATE 'ALTER TABLE CWPC_CHARGETYPERELATION_V DROP COLUMN DEFAULTCARDINALITY';
		end if;

END;
/


--alter currency to make it not mandatory in charge type version table
ALTER TABLE CWPC_CHARGETYPE_V MODIFY (CURRENCY NULL);
/


--alter key to use proper length 16
ALTER TABLE CWPC_ASSOCIATIONATTRVALUE MODIFY (
	ASSOCIATIONTYPEATTRVALUEID VARCHAR2(16 )
);
/
/

update CWPC_CHARGETYPERELATION_V SET ASSOCIATIONTYPE = 'optional' WHERE ASSOCIATIONTYPE is NULL;
/

DEFINE SEARCHVALUE = 'NotOverrideable';
DEFINE NEWVALUE = 'READONLY';

UPDATE CWPC_ITEMATTRIBUTE_V 
SET CLASSIFICATIONTYPES = REPLACE(CLASSIFICATIONTYPES, '&SEARCHVALUE', '&NEWVALUE')
WHERE
CLASSIFICATIONTYPES = '&SEARCHVALUE';

UPDATE CWPC_ITEMATTRIBUTE_V 
SET CLASSIFICATIONTYPES = REPLACE(CLASSIFICATIONTYPES, '&SEARCHVALUE,', '&NEWVALUE,')
WHERE
CLASSIFICATIONTYPES LIKE '&SEARCHVALUE,%';

UPDATE CWPC_ITEMATTRIBUTE_V 
SET CLASSIFICATIONTYPES = REPLACE(CLASSIFICATIONTYPES, ',&SEARCHVALUE,', ',&NEWVALUE,')
WHERE
CLASSIFICATIONTYPES = '%,&SEARCHVALUE,%';

UPDATE CWPC_ITEMATTRIBUTE_V 
SET CLASSIFICATIONTYPES = REPLACE(CLASSIFICATIONTYPES, ',&SEARCHVALUE', ',&NEWVALUE')
WHERE
CLASSIFICATIONTYPES = '%,&SEARCHVALUE';
/


UPDATE CWPC_INFOTABLE SET INFOTABLECODE = INFOMODELCODE
/
CREATE INDEX UNIQUE_ITC_STARTDATE ON CWPC_INFOTABLE (INFOTABLECODE,STARTDATE)
/

-- RECREATE UNIQUE INDEXES FOR TABLE CWPC_INFOTABLE
DROP INDEX UNIQUE_CWPC_INFOTABLE
/
CREATE UNIQUE INDEX UNIQUE_CWPC_INFOTABLE ON CWPC_INFOTABLE (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN INFOTABLECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

DROP TABLE CWPC_INFOTABLEROW_V CASCADE CONSTRAINTS
/

-- TABLE CWPC_INFOTABLEROW_V

CREATE TABLE CWPC_INFOTABLEROW_V(
	VERSIONID VARCHAR2(32) NOT NULL,
	CODE VARCHAR2(32) NOT NULL,
	INFOTABLECODE VARCHAR2(32) NOT NULL,
    INFOTABLEID VARCHAR2(32) NOT NULL,
	STARTDATE DATE NOT NULL,
	ENDDATE DATE,
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	STATUS VARCHAR2(3) NOT NULL,
	VERSIONCOMMITDATE DATE NOT NULL,
	CANCEL NUMBER(1),
	DATA VARCHAR2(4000 )
)
/

ALTER TABLE CWPC_INFOTABLEROW_V ADD CONSTRAINT PK_CWPC_INFOTABLEROW_V PRIMARY KEY (VERSIONID)
/

create or replace TRIGGER cwpc_infoTable_remove AFTER
    DELETE
    ON cwpc_infoTable
    FOR EACH ROW
    BEGIN
        DELETE FROM CWPC_INFOTABLEROW_V WHERE INFOTABLEID = :old.INFOTABLEID;
		cwpc_on_remove(:old.INFOTABLEID, null, 'cwt_pc:cwt_infoTable');	
	END;
/

-- CREATE INDEXES FOR TABLE CWPC_INFOTABLEROW_V
CREATE INDEX UNIQUE_ITR_STARTDATE ON CWPC_INFOTABLEROW_V (INFOTABLECODE,STARTDATE)
/
-- CREATE UNIQUE INDEXES FOR TABLE CWPC_INFOTABLEROW_V
CREATE UNIQUE INDEX UNIQUE_CWPC_INFOTABLEROW_V ON CWPC_INFOTABLEROW_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN INFOTABLECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/


AlTER TABLE CWPC_CATALOGRULE_V MODIFY (RULESCRIPT NULL);
/

INSERT INTO CWPC_ATTRIBUTE  ( ATTRIBUTECODE, NAME, LABEL, DESCRIPTION, STARTDATE, ENDDATE, STATUS, TYPE, LENGTH, PRECISION, CODETABLENAME, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED, CWDOCSTAMP  )
  VALUES
  ('catalogCodeAttribute', 'catalogCodeAttribute', INSERT_TRANSTXT('Catalog Code'), NULL,  to_timestamp('10-07-27 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'), NULL,'ACT',
    '3', 32,0, NULL,NULL,'upadmin',sysdate,'upadmin',sysdate,NULL );
     
INSERT INTO CWPC_ATTRIBUTE  ( ATTRIBUTECODE, NAME, LABEL, DESCRIPTION, STARTDATE, ENDDATE, STATUS, TYPE, LENGTH, PRECISION, CODETABLENAME, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED, CWDOCSTAMP  )
  VALUES
  ( 'translationAttribute', 'translationAttribute', INSERT_TRANSTXT('Translation'), NULL,  to_timestamp('10-07-27 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'), NULL, 'ACT',
    '10',0,0, NULL, NULL, 'upadmin', sysdate, 'upadmin', sysdate, NULL );
    
-- Insert AssociationTypes for InfoModel Attributes
INSERT INTO CWPC_ASSOCIATIONTYPE
(ASSOCIATIONTYPECODE, NAME, LABEL, STATUS, CATEGORY, RULETYPE, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED,CWDOCSTAMP) 
VALUES('infoModelSystemAttribute', 'System', INSERT_TRANSTXT('System'), 'ACT', 'InfoModelAttrib', null, null, 'upadmin', sysdate, 'upadmin', sysdate, DBMS_RANDOM.STRING('A', 5));
INSERT INTO CWPC_ASSOCIATIONTYPE
(ASSOCIATIONTYPECODE, NAME, LABEL, STATUS, CATEGORY, RULETYPE, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED,CWDOCSTAMP) 
VALUES('infoModelUserAttribute', 'User', INSERT_TRANSTXT('User'), 'ACT', 'InfoModelAttrib', null, null, 'upadmin', sysdate, 'upadmin', sysdate, DBMS_RANDOM.STRING('A', 5));

-- Insert AssociationTypes for Dimensions
INSERT INTO CWPC_ASSOCIATIONTYPE
(ASSOCIATIONTYPECODE, NAME, LABEL, STATUS, CATEGORY, RULETYPE, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED,CWDOCSTAMP) 
VALUES('simpleDimension', 'Simple', INSERT_TRANSTXT('Simple'), 'ACT', 'Dimensions', null, null, 'upadmin', sysdate, 'upadmin', sysdate, DBMS_RANDOM.STRING('A', 5));
INSERT INTO CWPC_ASSOCIATIONTYPE
(ASSOCIATIONTYPECODE, NAME, LABEL, STATUS, CATEGORY, RULETYPE, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED,CWDOCSTAMP) 
VALUES('hierarchyDimension', 'Hierarchy', INSERT_TRANSTXT('Hierarchy'), 'ACT', 'Dimensions', null, null, 'upadmin', sysdate, 'upadmin', sysdate, DBMS_RANDOM.STRING('A', 5));
INSERT INTO CWPC_ASSOCIATIONTYPE
(ASSOCIATIONTYPECODE, NAME, LABEL, STATUS, CATEGORY, RULETYPE, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED,CWDOCSTAMP) 
VALUES('levelledDimension', 'Levelled Hierarchy', INSERT_TRANSTXT('Levelled Hierarchy'), 'ACT', 'Dimensions', null, null, 'upadmin', sysdate, 'upadmin', sysdate, DBMS_RANDOM.STRING('A', 5));
INSERT INTO CWPC_ASSOCIATIONTYPE
(ASSOCIATIONTYPECODE, NAME, LABEL, STATUS, CATEGORY, RULETYPE, OWNERID, UPDATEDBY, LASTUPDATEDDATE, CWCREATEDBY, CWCREATED,CWDOCSTAMP) 
VALUES('rangeDimension', 'Range', INSERT_TRANSTXT('Range'), 'ACT', 'Dimensions', null, null, 'upadmin', sysdate, 'upadmin', sysdate, DBMS_RANDOM.STRING('A', 5));

-- Create pre-defined Dimension Specification of Simple Type
INSERT INTO CWPC_INFOMODEL 
(INFOMODELCODE,NAME,STATUS,STARTDATE,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,TYPE,SUBTYPE,ISROWVERSIONING) 
VALUES 
('simpleDimensionSpec','Simple Dimension Specification','ACT',to_timestamp('13-05-10 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'),'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),1,'simpleDimension',1);
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'catalogCodeAttribute','code','Code',1,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'simpleDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'translationAttribute','description','Description',2,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'simpleDimensionSpec',null,'infoModelSystemAttribute');

-- Create pre-defined Dimension Specification of Hierarchy Type
INSERT INTO CWPC_INFOMODEL 
(INFOMODELCODE,NAME,STATUS,STARTDATE,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,TYPE,SUBTYPE,ISROWVERSIONING) 
VALUES 
('hierarchyDimensionSpec','Hierarchy Dimension Specification','ACT',to_timestamp('13-05-10 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'),'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),1,'hierarchyDimension',1);
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'catalogCodeAttribute','code','Code',1,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'hierarchyDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'translationAttribute','description','Description',2,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'hierarchyDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','parentCode','Parent Code',3,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'hierarchyDimensionSpec',null,'infoModelSystemAttribute');

-- Create pre-defined Dimension Specification of Levelled Hierarchy Type
INSERT INTO CWPC_INFOMODEL 
(INFOMODELCODE,NAME,STATUS,STARTDATE,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,TYPE,SUBTYPE,ISROWVERSIONING) 
VALUES 
('levelledDimensionSpec','Levelled Hierarchy Dimension Specification','ACT',to_timestamp('13-05-10 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'),'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),1,'levelledDimension',1);
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'catalogCodeAttribute','code','Code',1,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'levelledDimensionSpec','readonly','infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'translationAttribute','description','Description',2,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'levelledDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','level','Level',3,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'levelledDimensionSpec','readonly','infoModelSystemAttribute');

-- Create pre-defined Dimension Specification of Range Type
INSERT INTO CWPC_INFOMODEL 
(INFOMODELCODE,NAME,STATUS,STARTDATE,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,TYPE,SUBTYPE,ISROWVERSIONING) 
VALUES 
('rangeDimensionSpec','Range Dimension Specification','ACT',to_timestamp('13-05-10 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'),'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),1,'rangeDimension',1);
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'catalogCodeAttribute','code','Code',1,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'rangeDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'translationAttribute','description','Description',2,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'rangeDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','parentCode','Parent Code',3,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'rangeDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'numberAttribute','minValue','Min Value',4,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'rangeDimensionSpec',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'numberAttribute','maxValue','Max Value',5,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'rangeDimensionSpec',null,'infoModelSystemAttribute');

-- Create pre-defined Multi-Dimensional Rule - Rule Assignment Table Model
INSERT INTO CWPC_INFOMODEL 
(INFOMODELCODE,NAME,STATUS,STARTDATE,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,TYPE,SUBTYPE,ISROWVERSIONING,DBTABLENAME,ISBLOBDBTABLE) 
VALUES 
('ruleAssignmentTable','Rule Assignment Table Model','ACT',to_timestamp('13-05-10 00:00:00.000000000','RR-MM-DD HH24:MI:SS.FF'),'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),3,null,1,'CWPC_RULEASSIGNMENT_V',null);
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','code','Code',1,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'ruleAssignmentTable',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','itemCode','Item Code',2,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'ruleAssignmentTable',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','catalogObjectCode','Catalog Object Code',3,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'ruleAssignmentTable',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','catalogObjectType','Catalog Object Code',4,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'ruleAssignmentTable',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','type','Type',5,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'ruleAssignmentTable',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','refId','Reference Id',6,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'ruleAssignmentTable',null,'infoModelSystemAttribute');
INSERT INTO CWPC_INFOMODELATTRIBUTE 
(INFOMODELATTRIBUTEID,ATTRIBUTECODE,MODELATTRNAME,NAME,SEQUENCE,ISNULL,ISSEARCH,DESCENDING,UPDATEDBY,LASTUPDATEDDATE,CWCREATEDBY,CWCREATED,CWDOCSTAMP,INFOMODELCODE,type,associationType) 
VALUES (cwdocseq.NEXTVAL,'stringAttribute','value','Value',7,null,1,null,'upadmin',sysdate,'upadmin',sysdate,DBMS_RANDOM.STRING('A', 5),'ruleAssignmentTable',null,'infoModelSystemAttribute');

commit;

--------------------------------- Model creation for Rule Space -------------------------------------------------------------------
-- TABLE CWPC_RULESPACEROW_V
DROP INDEX UNIQUE_RSR_STARTDATE
/
DROP INDEX UNIQUE_CWPC_RULESPACEROW_V
/
DROP TABLE CWPC_RULESPACEROW_V CASCADE CONSTRAINTS
/
CREATE TABLE CWPC_RULESPACEROW_V(
	VERSIONID VARCHAR2(32) NOT NULL,
	CODE VARCHAR2(32) NOT NULL,
	INFOTABLECODE VARCHAR2(32) NOT NULL,
	STARTDATE DATE NOT NULL,
	ENDDATE DATE,
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	STATUS VARCHAR2(3) NOT NULL,
	VERSIONCOMMITDATE DATE NOT NULL,
	CANCEL NUMBER(1),
	DATA VARCHAR2(4000 )
)
/

-- CREATE INDEXES FOR TABLE CWPC_RULESPACEROW_V
CREATE INDEX UNIQUE_RSR_STARTDATE ON CWPC_RULESPACEROW_V (INFOTABLECODE,STARTDATE)
/

-- CREATE UNIQUE INDEXES FOR TABLE CWPC_RULESPACEROW_V
CREATE UNIQUE INDEX UNIQUE_CWPC_RULESPACEROW_V ON CWPC_RULESPACEROW_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN INFOTABLECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

-- ADD KEYS FOR TABLE CWPC_RULESPACEROW_V
ALTER TABLE CWPC_RULESPACEROW_V ADD CONSTRAINT PK_CWPC_RULESPACEROW_V PRIMARY KEY (VERSIONID)
/


--------------------------------- Model creation for Rule Assignment -------------------------------------------------------------------
DROP INDEX UNIQUE_RA_STARTDATE
/
DROP INDEX UNIQUE_CWPC_RULEASSIGNMENT_V
/
DROP TABLE CWPC_RULEASSIGNMENT_V CASCADE CONSTRAINTS
/
CREATE TABLE CWPC_RULEASSIGNMENT_V(
	VERSIONID VARCHAR2(32) NOT NULL,
	CODE VARCHAR2(32) NOT NULL,
	INFOTABLECODE VARCHAR2(32) NOT NULL,
	INFOTABLEID VARCHAR2(32) NOT NULL,
	STARTDATE DATE NOT NULL,
	ENDDATE DATE,
	CWCREATED DATE,
	CWCREATEDBY VARCHAR2(64),
	LASTUPDATEDDATE DATE,
	UPDATEDBY VARCHAR2(64),
	STATUS VARCHAR2(3) NOT NULL,
	VERSIONCOMMITDATE DATE NOT NULL,
	CANCEL NUMBER(1),
	ITEMCODE VARCHAR2(32),
	CATALOGOBJECTCODE VARCHAR2(32),
	CATALOGOBJECTTYPE VARCHAR2(16),
	TYPE VARCHAR2(32),
	REFID VARCHAR2(512),
	VALUE VARCHAR2(4000)
)
/

-- CREATE INDEXES FOR TABLE CWPC_RULEASSIGNMENT_V
CREATE INDEX UNIQUE_RA_STARTDATE ON CWPC_RULEASSIGNMENT_V (INFOTABLECODE,STARTDATE)
/

-- CREATE UNIQUE INDEXES FOR TABLE CWPC_RULEASSIGNMENT_V
CREATE UNIQUE INDEX UNIQUE_CWPC_RULEASSIGNMENT_V ON CWPC_RULEASSIGNMENT_V (
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN CODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN INFOTABLECODE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN STARTDATE ELSE NULL END,
CASE WHEN STARTDATE!=ENDDATE OR ENDDATE IS NULL THEN VERSIONCOMMITDATE ELSE NULL END)
/

-- ADD KEYS FOR TABLE CWPC_RULEASSIGNMENT_V
ALTER TABLE CWPC_RULEASSIGNMENT_V ADD CONSTRAINT PK_CWPC_RULEASSIGNMENT_V PRIMARY KEY (VERSIONID)
/

-- new implementation for itembusinessdates does not have value for BUSINESSDATESVALUEID instead dates will be stored in json format
alter table cwpc_itembusinessDates_v modify (BUSINESSDATESVALUEID null);

create or replace TRIGGER cwpc_catalogRule_remove AFTER
    DELETE
    ON cwpc_catalogRule
    FOR EACH ROW
    BEGIN		
		IF :old.infotablecode IS NOT NULL THEN
			DELETE FROM CWPC_INFOTABLE WHERE  :OLD.INFOTABLECODE=INFOTABLECODE; 
		END IF;		
		-- remove pre-condition associated with the rule
		DELETE FROM CWPC_ITEMRULE_V WHERE  :OLD.RULENAME=ITEMCODE AND CATALOGOBJECTTYPE='CatalogRule'; 		
		cwpc_on_remove(null, :old.ruleName, 'cwt_pc:cwt_catalogRule');	
END;
/

create or replace TRIGGER cwpc_infoModel_remove AFTER
    DELETE
    ON cwpc_infoModel
    FOR EACH ROW
    BEGIN
		cwpc_on_remove(null, :old.INFOMODELCODE, 'cwt_pc:cwt_infoModel');	
		 IF :old.type = 2 THEN
			DELETE FROM CWPC_INFOTABLE where INFOMODELCODE=:old.INFOMODELCODE;
		END IF;	
END;
/

------- end of itembusinessdates updates


UPDATE CWPC_ATTRIBUTE SET TYPE = 7 WHERE TYPE = 24;

CREATE OR REPLACE TRIGGER trg_unique_cwpc_infotable BEFORE
  INSERT ON cwpc_infotable REFERENCING NEW AS NEW FOR EACH ROW DECLARE l_cnt NUMBER;
  BEGIN
    SELECT COUNT (*)
    INTO l_cnt
    FROM cwpc_infotable
    WHERE infotablecode = :NEW.infotablecode
    AND infomodelcode  <> :NEW.infomodelcode;
    IF (l_cnt           > 0) THEN
      raise_application_error (-20001, :NEW.infotablecode || ' already exists in another infoModel' );
    END IF;
  END;
/

CREATE OR REPLACE TRIGGER cwpc_infoTable_remove AFTER
  DELETE ON cwpc_infoTable FOR EACH ROW BEGIN
  DELETE FROM CWPC_INFOTABLEROW_V WHERE INFOTABLEID = :old.INFOTABLEID;
  DELETE FROM CWPC_RULEASSIGNMENT_V WHERE INFOTABLEID = :old.INFOTABLEID;
  cwpc_on_remove(:old.INFOTABLEID, NULL, 'cwt_pc:cwt_infoTable');
END;
/


---- Delete Rule Space Rule when no more reference in Rule Assignment, Last Rule Assignment Reference delete the Rule Space
create or replace FUNCTION get_token(
    p_input_string IN VARCHAR2,            -- input string
    p_token_number IN PLS_INTEGER,         -- token number
    p_delimiter    IN VARCHAR2 DEFAULT ',' -- separator character
  )
  RETURN VARCHAR2
IS
  v_temp_string VARCHAR2(32767) := p_delimiter || p_input_string ;
  v_pos1 PLS_INTEGER ;
  v_pos2 PLS_INTEGER ;
BEGIN
  v_pos1     := INSTR( v_temp_string, p_delimiter, 1, p_token_number ) ;
  IF v_pos1   > 0 THEN
    v_pos2   := INSTR( v_temp_string, p_delimiter, 1, p_token_number + 1) ;
    IF v_pos2 = 0 THEN
      v_pos2 := LENGTH( v_temp_string ) + 1 ;
    END IF ;
    RETURN( SUBSTR( v_temp_string, v_pos1+1, v_pos2 - v_pos1-1 ) ) ;
  ELSE
    RETURN NULL ;
  END IF ;
EXCEPTION
  WHEN OTHERS THEN
    RAISE;      
END get_token;
/

-- Store Procedure to Delete Rule Space Row base if no more reference in Rule Assignment
create or replace PROCEDURE DELETE_UNREFERENCED_SELECTION (refIdList in clob) 
AS
	selectionRefCount NUMBER(10) := 0;
	refId varchar2(32);
	i NUMBER(10) := 1;
	searchCriteria varchar2(64);
BEGIN 
	LOOP
        selectionRefCount := 0;
        refId := get_token( refIdList, i , '|') ;
        EXIT WHEN refId IS NULL ;
        searchCriteria := '%'||refId||'%';
        SELECT COUNT(*) into selectionRefCount FROM CWPC_RULEASSIGNMENT_V WHERE TYPE = 'selection' AND REFID LIKE searchCriteria;
        IF selectionRefCount = 0 then
          DELETE FROM CWPC_RULESPACEROW_V WHERE VERSIONID = refId;
        END IF;
        i := i + 1 ;
	END LOOP ;         
END;
/
-- Trigger for Rule Assignment Remove
create or replace TRIGGER cwpc_ruleAssignment_remove 
  FOR DELETE ON cwpc_ruleAssignment_v
    COMPOUND TRIGGER
  refIdListStr CLOB;
  AFTER EACH ROW IS      
                BEGIN
  IF refIdListStr IS NULL THEN
    refIdListStr := :old.REFID;
  ELSE
    refIdListStr := refIdListStr || '|' || :old.REFID;
  END IF;
  END AFTER EACH ROW;
  AFTER STATEMENT IS      
                BEGIN
  IF refIdListStr IS NOT NULL THEN
    DELETE_UNREFERENCED_SELECTION(refIdListStr);
  END IF;
  END AFTER STATEMENT;
	END cwpc_ruleAssignment_remove;
/


DROP INDEX UNIQUE_CATALOGOBJECT;
CREATE UNIQUE INDEX UNIQUE_CATALOGOBJECT ON CWPC_PROJECTCOMMAND (
CASE WHEN CATALOGOBJECTID IS NOT NULL THEN CATALOGOBJECTID ELSE NULL END,
CASE WHEN CATALOGOBJECTID IS NOT NULL THEN PROJECTID ELSE NULL END);
/
update cwcalendar
set month=month-1 where day>0 ;
/-- Increase size of item attribute value
ALTER TABLE CWPC_BASKETITEMLEAVES MODIFY (VALUE VARCHAR2(2048));

-- Make sure the basket-related tables have primary keys and the BASKETITEMLEAVES table is indexed
ALTER TABLE CWPC_BASKET ADD CONSTRAINT PK_BASKET_BASKID PRIMARY KEY (BASKETID);
COMMIT;
ALTER TABLE CWPC_BASKETITEM ADD CONSTRAINT PK_BITEM_BITEMID PRIMARY KEY (BASKETITEMID);
COMMIT;
ALTER TABLE CWPC_BASKETITEMRELATION ADD CONSTRAINT PK_BIREL_BIRELID PRIMARY KEY (BASKETITEMRELATIONID);
COMMIT;
CREATE INDEX IX_BASKETITEMLEAVES ON CWPC_BASKETITEMLEAVES (DOC_ID);
COMMIT;

ALTER TABLE CWPC_BASKETITEMLEAVES ADD PARENT_ID VARCHAR2 (16);
CREATE INDEX IX_BIL_PARENT_ID ON CWPC_BASKETITEMLEAVES (PARENT_ID);
COMMIT;

UPDATE CWPC_BASKETITEMLEAVES BIL SET PARENT_ID=(select unique BI.BASKETID from CWPC_BASKETITEM BI where BIL.DOC_ID = BI.BASKETITEMID);
COMMIT;


update CWPC_BASKETITEMCHARGE set BASKETITEMCHARGEID = cwdocseq.nextval;
COMMIT;

DECLARE
cnt number:=0;
BEGIN
	select count(*) into cnt from user_constraints where constraint_name='PK_BASKETITEMCHARGE';
	IF cnt = 1 then
		EXECUTE IMMEDIATE 'ALTER TABLE CWPC_BASKETITEMCHARGE DROP CONSTRAINT PK_BASKETITEMCHARGE';
	END IF;
END;
/

ALTER TABLE CWPC_BASKETITEMCHARGE ADD CONSTRAINT PK_BICHG_BICHGID PRIMARY KEY (BASKETITEMCHARGEID);
COMMIT;


DROP INDEX IX_BASKETITEMLEAVES;

CREATE INDEX IX_BASKETITEMLEAVES ON CWPC_BASKETITEMLEAVES (DOC_ID, LEAF_NAME);

COMMIT;

DEFINE INDEX_SYNCH_INTERVAL_MINUTES = 10;
ALTER TABLE CWPC_BASKETITEM ADD DATA NCLOB;
ALTER TABLE CWPC_BASKETITEM ADD SEARCHTEXT VARCHAR2(4000);
DROP INDEX IX_BASKETITEM_SEARCHTEXT;
CREATE INDEX IX_BASKETITEM_SEARCHTEXT ON CWPC_BASKETITEM(SEARCHTEXT)
INDEXTYPE IS ctxsys.context PARAMETERS ('SYNC (EVERY "SYSDATE+&INDEX_SYNCH_INTERVAL_MINUTES/1440")');

COMMIT;

CREATE INDEX IX_BASKET_CWORDERID ON CWPC_BASKET (CWORDERID);
CREATE INDEX IX_BASKETITEM_ITEMCODE ON CWPC_BASKETITEM (ITEMCODE);
CREATE INDEX IX_BASKETITEMRELATION_BASKETID ON CWPC_BASKETITEMRELATION (BASKETID);

ALTER TABLE CWPC_BASKETITEM ADD relations VARCHAR2(4000);

ALTER TABLE CWPC_BASKETITEMCHARGE MODIFY (CURRENCY NULL);
COMMIT;



INSERT INTO CWPRODUCTPROPERTIES (ID,NVALUE) VALUES('catalog',00006018);
INSERT INTO CWPRODUCTPROPERTIES (ID,NVALUE) VALUES('serviceOrchestrationFramework',20120815);
INSERT INTO CWPRODUCTPROPERTIES (ID,NVALUE) VALUES('trainingMetadata',1);
INSERT INTO CWPRODUCTPROPERTIES (ID,NVALUE) VALUES('SIDCommon',00005201);
UPDATE CWPRODUCTPROPERTIES SET NVALUE=20120817 WHERE ID='cwl_security';
INSERT INTO CWPRODUCTPROPERTIES (ID,NVALUE) VALUES('catalogClient',00006003);

COMMIT;


-- Generated by Ericsson Service Designer on Tue Jul 04 18:52:57 IST 2017

